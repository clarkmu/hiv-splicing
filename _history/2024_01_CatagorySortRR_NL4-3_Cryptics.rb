#this version updated to remove some tabulation errors and improve the output format
#parent program:2018_10_18_NL4-3_ImprovedCatagorySortRR_TransmittedFounder
#From update to category sort done for Hatziioanou stHIVs, this version is just for NL4-3


#this takes as input both Illumina files from  an un- tagged forward primer (idx_fp) and an unanchored random reverse primer uni_rp_sh
#the amplification PCR steps used idx_fp for first PCR, without any forward tagging step - THERE IS NO FORWARD PID

#checks quality scores on PID
#identifies the catagory from the forward read
#if the forward read doesn't deliver, check the reverse read
#hashes it under the PID, but only if it's a good read

#counts the PIDs and hashes them in pIDCountHash
#makes a PID distribution hash and outputs it

#outputs the reverse primer tagged indexes



#$ref is entire reference sequence starting at D1 - to see if anything spliced out of bound, usually in env
#$refRC is entire RC sequence

#NL4-3 reference
$ref = "GTGAGTACGCCAAAAATTTTGACTAGCGGAGGCTAGAAGGAGAGAGATGGGTGCGAGAGCGTCGGTATTAAGCGGGGGAGAATTAGATAAATGGGAAAAAATTCGGTTAAGGCCAGGGGGAAAGAAACAATATAAACTAAAACATATAGTATGGGCAAGCAGGGAGCTAGAACGATTCGCAGTTAATCCTGGCCTTTTAGAGACATCAGAAGGCTGTAGACAAATACTGGGACAGCTACAACCATCCCTTCAGACAGGATCAGAAGAACTTAGATCATTATATAATACAATAGCAGTCCTCTATTGTGTGCATCAAAGGATAGATGTAAAAGACACCAAGGAAGCCTTAGATAAGATAGAGGAAGAGCAAAACAAAAGTAAGAAAAAGGCACAGCAAGCAGCAGCTGACACAGGAAACAACAGCCAGGTCAGCCAAAATTACCCTATAGTGCAGAACCTCCAGGGGCAAATGGTACATCAGGCCATATCACCTAGAACTTTAAATGCATGGGTAAAAGTAGTAGAAGAGAAGGCTTTCAGCCCAGAAGTAATACCCATGTTTTCAGCATTATCAGAAGGAGCCACCCCACAAGATTTAAATACCATGCTAAACACAGTGGGGGGACATCAAGCAGCCATGCAAATGTTAAAAGAGACCATCAATGAGGAAGCTGCAGAATGGGATAGATTGCATCCAGTGCATGCAGGGCCTATTGCACCAGGCCAGATGAGAGAACCAAGGGGAAGTGACATAGCAGGAACTACTAGTACCCTTCAGGAACAAATAGGATGGATGACACATAATCCACCTATCCCAGTAGGAGAAATCTATAAAAGATGGATAATCCTGGGATTAAATAAAATAGTAAGAATGTATAGCCCTACCAGCATTCTGGACATAAGACAAGGACCAAAGGAACCCTTTAGAGACTATGTAGACCGATTCTATAAAACTCTAAGAGCCGAGCAAGCTTCACAAGAGGTAAAAAATTGGATGACAGAAACCTTGTTGGTCCAAAATGCGAACCCAGATTGTAAGACTATTTTAAAAGCATTGGGACCAGGAGCGACACTAGAAGAAATGATGACAGCATGTCAGGGAGTGGGGGGACCCGGCCATAAAGCAAGAGTTTTGGCTGAAGCAATGAGCCAAGTAACAAATCCAGCTACCATAATGATACAGAAAGGCAATTTTAGGAACCAAAGAAAGACTGTTAAGTGTTTCAATTGTGGCAAAGAAGGGCACATAGCCAAAAATTGCAGGGCCCCTAGGAAAAAGGGCTGTTGGAAATGTGGAAAGGAAGGACACCAAATGAAAGATTGTACTGAGAGACAGGCTAATTTTTTAGGGAAGATCTGGCCTTCCCACAAGGGAAGGCCAGGGAATTTTCTTCAGAGCAGACCAGAGCCAACAGCCCCACCAGAAGAGAGCTTCAGGTTTGGGGAAGAGACAACAACTCCCTCTCAGAAGCAGGAGCCGATAGACAAGGAACTGTATCCTTTAGCTTCCCTCAGATCACTCTTTGGCAGCGACCCCTCGTCACAATAAAGATAGGGGGGCAATTAAAGGAAGCTCTATTAGATACAGGAGCAGATGATACAGTATTAGAAGAAATGAATTTGCCAGGAAGATGGAAACCAAAAATGATAGGGGGAATTGGAGGTTTTATCAAAGTAAGACAGTATGATCAGATACTCATAGAAATCTGCGGACATAAAGCTATAGGTACAGTATTAGTAGGACCTACACCTGTCAACATAATTGGAAGAAATCTGTTGACTCAGATTGGCTGCACTTTAAATTTTCCCATTAGTCCTATTGAGACTGTACCAGTAAAATTAAAGCCAGGAATGGATGGCCCAAAAGTTAAACAATGGCCATTGACAGAAGAAAAAATAAAAGCATTAGTAGAAATTTGTACAGAAATGGAAAAGGAAGGAAAAATTTCAAAAATTGGGCCTGAAAATCCATACAATACTCCAGTATTTGCCATAAAGAAAAAAGACAGTACTAAATGGAGAAAATTAGTAGATTTCAGAGAACTTAATAAGAGAACTCAAGATTTCTGGGAAGTTCAATTAGGAATACCACATCCTGCAGGGTTAAAACAGAAAAAATCAGTAACAGTACTGGATGTGGGCGATGCATATTTTTCAGTTCCCTTAGATAAAGACTTCAGGAAGTATACTGCATTTACCATACCTAGTATAAACAATGAGACACCAGGGATTAGATATCAGTACAATGTGCTTCCACAGGGATGGAAAGGATCACCAGCAATATTCCAGTGTAGCATGACAAAAATCTTAGAGCCTTTTAGAAAACAAAATCCAGACATAGTCATCTATCAATACATGGATGATTTGTATGTAGGATCTGACTTAGAAATAGGGCAGCATAGAACAAAAATAGAGGAACTGAGACAACATCTGTTGAGGTGGGGATTTACCACACCAGACAAAAAACATCAGAAAGAACCTCCATTCCTTTGGATGGGTTATGAACTCCATCCTGATAAATGGACAGTACAGCCTATAGTGCTGCCAGAAAAGGACAGCTGGACTGTCAATGACATACAGAAATTAGTGGGAAAATTGAATTGGGCAAGTCAGATTTATGCAGGGATTAAAGTAAGGCAATTATGTAAACTTCTTAGGGGAACCAAAGCACTAACAGAAGTAGTACCACTAACAGAAGAAGCAGAGCTAGAACTGGCAGAAAACAGGGAGATTCTAAAAGAACCGGTACATGGAGTGTATTATGACCCATCAAAAGACTTAATAGCAGAAATACAGAAGCAGGGGCAAGGCCAATGGACATATCAAATTTATCAAGAGCCATTTAAAAATCTGAAAACAGGAAAATATGCAAGAATGAAGGGTGCCCACACTAATGATGTGAAACAATTAACAGAGGCAGTACAAAAAATAGCCACAGAAAGCATAGTAATATGGGGAAAGACTCCTAAATTTAAATTACCCATACAAAAGGAAACATGGGAAGCATGGTGGACAGAGTATTGGCAAGCCACCTGGATTCCTGAGTGGGAGTTTGTCAATACCCCTCCCTTAGTGAAGTTATGGTACCAGTTAGAGAAAGAACCCATAATAGGAGCAGAAACTTTCTATGTAGATGGGGCAGCCAATAGGGAAACTAAATTAGGAAAAGCAGGATATGTAACTGACAGAGGAAGACAAAAAGTTGTCCCCCTAACGGACACAACAAATCAGAAGACTGAGTTACAAGCAATTCATCTAGCTTTGCAGGATTCGGGATTAGAAGTAAACATAGTGACAGACTCACAATATGCATTGGGAATCATTCAAGCACAACCAGATAAGAGTGAATCAGAGTTAGTCAGTCAAATAATAGAGCAGTTAATAAAAAAGGAAAAAGTCTACCTGGCATGGGTACCAGCACACAAAGGAATTGGAGGAAATGAACAAGTAGATGGGTTGGTCAGTGCTGGAATCAGGAAAGTACTATTTTTAGATGGAATAGATAAGGCCCAAGAAGAACATGAGAAATATCACAGTAATTGGAGAGCAATGGCTAGTGATTTTAACCTACCACCTGTAGTAGCAAAAGAAATAGTAGCCAGCTGTGATAAATGTCAGCTAAAAGGGGAAGCCATGCATGGACAAGTAGACTGTAGCCCAGGAATATGGCAGCTAGATTGTACACATTTAGAAGGAAAAGTTATCTTGGTAGCAGTTCATGTAGCCAGTGGATATATAGAAGCAGAAGTAATTCCAGCAGAGACAGGGCAAGAAACAGCATACTTCCTCTTAAAATTAGCAGGAAGATGGCCAGTAAAAACAGTACATACAGACAATGGCAGCAATTTCACCAGTACTACAGTTAAGGCCGCCTGTTGGTGGGCGGGGATCAAGCAGGAATTTGGCATTCCCTACAATCCCCAAAGTCAAGGAGTAATAGAATCTATGAATAAAGAATTAAAGAAAATTATAGGACAGGTAAGAGATCAGGCTGAACATCTTAAGACAGCAGTACAAATGGCAGTATTCATCCACAATTTTAAAAGAAAAGGGGGGATTGGGGGGTACAGTGCAGGGGAAAGAATAGTAGACATAATAGCAACAGACATACAAACTAAAGAATTACAAAAACAAATTACAAAAATTCAAAATTTTCGGGTTTATTACAGGGACAGCAGAGATCCAGTTTGGAAAGGACCAGCAAAGCTCCTCTGGAAAGGTGAAGGGGCAGTAGTAATACAAGATAATAGTGACATAAAAGTAGTGCCAAGAAGAAAAGCAAAGATCATCAGGGATTATGGAAAACAGATGGCAGGTGATGATTGTGTGGCAAGTAGACAGGATGAGGATTAACACATGGAAAAGATTAGTAAAACACCATATGTATATTTCAAGGAAAGCTAAGGACTGGTTTTATAGACATCACTATGAAAGTACTAATCCAAAAATAAGTTCAGAAGTACACATCCCACTAGGGGATGCTAAATTAGTAATAACAACATATTGGGGTCTGCATACAGGAGAAAGAGACTGGCATTTGGGTCAGGGAGTCTCCATAGAATGGAGGAAAAAGAGATATAGCACACAAGTAGACCCTGACCTAGCAGACCAACTAATTCATCTGCACTATTTTGATTGTTTTTCAGAATCTGCTATAAGAAATACCATATTAGGACGTATAGTTAGTCCTAGGTGTGAATATCAAGCAGGACATAACAAGGTAGGATCTCTACAGTACTTGGCACTAGCAGCATTAATAAAACCAAAACAGATAAAGCCACCTTTGCCTAGTGTTAGGAAACTGACAGAGGACAGATGGAACAAGCCCCAGAAGACCAAGGGCCACAGAGGGAGCCATACAATGAATGGACACTAGAGCTTTTAGAGGAACTTAAGAGTGAAGCTGTTAGACATTTTCCTAGGATATGGCTCCATAACTTAGGACAACATATCTATGAAACTTACGGGGATACTTGGGCAGGAGTGGAAGCCATAATAAGAATTCTGCAACAACTGCTGTTTATCCATTTCAGAATTGGGTGTCGACATAGCAGAATAGGCGTTACTCGACAGAGGAGAGCAAGAAATGGAGCCAGTAGATCCTAGACTAGAGCCCTGGAAGCATCCAGGAAGTCAGCCTAAAACTGCTTGTACCAATTGCTATTGTAAAAAGTGTTGCTTTCATTGCCAAGTTTGTTTCATGACAAAAGCCTTAGGCATCTCCTATGGCAGGAAGAAGCGGAGACAGCGACGAAGAGCTCATCAGAACAGTCAGACTCATCAAGCTTCTCTATCAAAGCAGTAAGTAGTACATGTAATGCAACCTATAATAGTAGCAATAGTAGCATTAGTAGTAGCAATAATAATAGCAATAGTTGTGTGGTCCATAGTAATCATAGAATATAGGAAAATATTAAGACAAAGAAAAATAGACAGGTTAATTGATAGACTAATAGAAAGAGCAGAAGACAGTGGCAATGAGAGTGAAGGAGAAGTATCAGCACTTGTGGAGATGGGGGTGGAAATGGGGCACCATGCTCCTTGGGATATTGATGATCTGTAGTGCTACAGAAAAATTGTGGGTCACAGTCTATTATGGGGTACCTGTGTGGAAGGAAGCAACCACCACTCTATTTTGTGCATCAGATGCTAAAGCATATGATACAGAGGTACATAATGTTTGGGCCACACATGCCTGTGTACCCACAGACCCCAACCCACAAGAAGTAGTATTGGTAAATGTGACAGAAAATTTTAACATGTGGAAAAATGACATGGTAGAACAGATGCATGAGGATATAATCAGTTTATGGGATCAAAGCCTAAAGCCATGTGTAAAATTAACCCCACTCTGTGTTAGTTTAAAGTGCACTGATTTGAAGAATGATACTAATACCAATAGTAGTAGCGGGAGAATGATAATGGAGAAAGGAGAGATAAAAAACTGCTCTTTCAATATCAGCACAAGCATAAGAGATAAGGTGCAGAAAGAATATGCATTCTTTTATAAACTTGATATAGTACCAATAGATAATACCAGCTATAGGTTGATAAGTTGTAACACCTCAGTCATTACACAGGCCTGTCCAAAGGTATCCTTTGAGCCAATTCCCATACATTATTGTGCCCCGGCTGGTTTTGCGATTCTAAAATGTAATAATAAGACGTTCAATGGAACAGGACCATGTACAAATGTCAGCACAGTACAATGTACACATGGAATCAGGCCAGTAGTATCAACTCAACTGCTGTTAAATGGCAGTCTAGCAGAAGAAGATGTAGTAATTAGATCTGCCAATTTCACAGACAATGCTAAAACCATAATAGTACAGCTGAACACATCTGTAGAAATTAATTGTACAAGACCCAACAACAATACAAGAAAAAGTATCCGTATCCAGAGGGGACCAGGGAGAGCATTTGTTACAATAGGAAAAATAGGAAATATGAGACAAGCACATTGTAACATTAGTAGAGCAAAATGGAATGCCACTTTAAAACAGATAGCTAGCAAATTAAGAGAACAATTTGGAAATAATAAAACAATAATCTTTAAGCAATCCTCAGGAGGGGACCCAGAAATTGTAACGCACAGTTTTAATTGTGGAGGGGAATTTTTCTACTGTAATTCAACACAACTGTTTAATAGTACTTGGTTTAATAGTACTTGGAGTACTGAAGGGTCAAATAACACTGAAGGAAGTGACACAATCACACTCCCATGCAGAATAAAACAATTTATAAACATGTGGCAGGAAGTAGGAAAAGCAATGTATGCCCCTCCCATCAGTGGACAAATTAGATGTTCATCAAATATTACTGGGCTGCTATTAACAAGAGATGGTGGTAATAACAACAATGGGTCCGAGATCTTCAGACCTGGAGGAGGCGATATGAGGGACAATTGGAGAAGTGAATTATATAAATATAAAGTAGTAAAAATTGAACCATTAGGAGTAGCACCCACCAAGGCAAAGAGAAGAGTGGTGCAGAGAGAAAAAAGAGCAGTGGGAATAGGAGCTTTGTTCCTTGGGTTCTTGGGAGCAGCAGGAAGCACTATGGGCTGCACGTCAATGACGCTGACGGTACAGGCCAGACAATTATTGTCTGATATAGTGCAGCAGCAGAACAATTTGCTGAGGGCTATTGAGGCGCAACAGCATCTGTTGCAACTCACAGTCTGGGGCATCAAACAGCTCCAGGCAAGAATCCTGGCTGTGGAAAGATACCTAAAGGATCAACAGCTCCTGGGGATTTGGGGTTGCTCTGGAAAACTCATTTGCACCACTGCTGTGCCTTGGAATGCTAGTTGGAGTAATAAATCTCTGGAACAGATTTGGAATAACATGACCTGGATGGAGTGGGACAGAGAAATTAACAATTACACAAGCTTAATACACTCCTTAATTGAAGAATCGCAAAACCAGCAAGAAAAGAATGAACAAGAATTATTGGAATTAGATAAATGGGCAAGTTTGTGGAATTGGTTTAACATAACAAATTGGCTGTGGTATATAAAATTATTCATAATGATAGTAGGAGGCTTGGTAGGTTTAAGAATAGTTTTTGCTGTACTTTCTATAGTGAATAGAGTTAGGCAGGGATATTCACCATTATCGTTTCAGACCCACCTCCCAATCCCGAGGGGACCCGACAGGCCCGAAGGAATAGAAGAAGAAGGTGGAGAGAGAGACAGAGACAGATCCATTCGATTAGTGAACGGATCCTTAGCACTTATCTGGGACGATCTGCGGAGCCTGTGCCTCTTCAGCTACCACCGCTTGAGAGACTTACTCTTGATTGTAACGAGGATTGTGGAACTTCTGGGACGCAGGGGGTGGGAAGCCCTCAAATATTGGTGGAATCTCCTACAGTATTGGAGTCAGGAACTAAAGAATAGTGCTGTTAACTTGCTCAATGCCACAGCCATAGCAGTAGCTGAGGGGACAGATAGGGTTATAGAAGTATTACAAGCAGCTTATAGAGCTATTCGCCACATACCTAGAAGAATAAGACAGGGCTTGGAAAGGATTTTGCTATAAGATGGGTGGCAAGTGGTCAAAAAGTAGTGTGATTGGATGGCCTGCTGTAAGGGAAAGAATGAGACGAGCTGAGCCAGCAGCAGATGGGGTGGGAGCAGTATCTCGAGACCTAGAAAAACATGGAGCAATCACAAGTAGCAATACAGCAGCTAACAATGCTGCTTGTGCCTGGCTAGAAGCACAAGAGGAGGAAGAGGTGGGTTTTCCAGTCACACCTCAGGTACCTTTAAGACCAATGACTTACAAGGCAGCTGTAGATCTTAGCCACTTTTTAAAAGAAAAGGGGGGACTGGAAGGGCTAATTCACTCCCAAAGAAGACAAGATATCCTTGATCTGTGGATCTACCACACACAAGGCTACTTCCCTGATTGGCAGAACTACACACCAGGGCCAGGGGTCAGATATCCACTGACCTTTGGATGGTGCTACAAGCTAGTACCAGTTGAGCCAGATAAGGTAGAAGAGGCCAATAAAGGAGAGAACACCAGCTTGTTACACCCTGTGAGCCTGCATGGAATGGATGACCCTGAGAGAGAAGTGTTAGAGTGGAGGTTTGACAGCCGCCTAGCATTTCATCACGTGGCCCGAGAGCTGCATCCGGAGTACTTCAAGAACTGCTGACATCGAGCTTGCTACAAGGGACTTTCCGCTGGGGACTTTCCAGGGAGGCGTGGCCTGGGCGGGACTGGGGAGTGGCGAGCCCTCAGATGCTGCATATAAGCAGCTGCTTTTTGCCTGTACTGGGTCTCTCTGGTTAGACCAGATCTGAGCCTGGGAGCTCTCTGGCTAACTAGGGAACCCACTGCTTAAGCCTCAATAAAGCTTGCCTTGAGTGCTTCAAGTAGTGTGTGCCCGTCTGTTGTGTGACTCTGGTAACTAGAGATCCCTCAGACCCTTTTAGTCAGTGTGGAAAATCTCTAGCA"

#NL4-3 reverse compliment, entire sequence
$refRC = "TGCTAGAGATTTTCCACACTGACTAAAAGGGTCTGAGGGATCTCTAGTTACCAGAGTCACACAACAGACGGGCACACACTACTTGAAGCACTCAAGGCAAGCTTTATTGAGGCTTAAGCAGTGGGTTCCCTAGTTAGCCAGAGAGCTCCCAGGCTCAGATCTGGTCTAACCAGAGAGACCCAGTACAGGCAAAAAGCAGCTGCTTATATGCAGCATCTGAGGGCTCGCCACTCCCCAGTCCCGCCCAGGCCACGCCTCCCTGGAAAGTCCCCAGCGGAAAGTCCCTTGTAGCAAGCTCGATGTCAGCAGTTCTTGAAGTACTCCGGATGCAGCTCTCGGGCCACGTGATGAAATGCTAGGCGGCTGTCAAACCTCCACTCTAACACTTCTCTCTCAGGGTCATCCATTCCATGCAGGCTCACAGGGTGTAACAAGCTGGTGTTCTCTCCTTTATTGGCCTCTTCTACCTTATCTGGCTCAACTGGTACTAGCTTGTAGCACCATCCAAAGGTCAGTGGATATCTGACCCCTGGCCCTGGTGTGTAGTTCTGCCAATCAGGGAAGTAGCCTTGTGTGTGGTAGATCCACAGATCAAGGATATCTTGTCTTCTTTGGGAGTGAATTAGCCCTTCCAGTCCCCCCTTTTCTTTTAAAAAGTGGCTAAGATCTACAGCTGCCTTGTAAGTCATTGGTCTTAAAGGTACCTGAGGTGTGACTGGAAAACCCACCTCTTCCTCCTCTTGTGCTTCTAGCCAGGCACAAGCAGCATTGTTAGCTGCTGTATTGCTACTTGTGATTGCTCCATGTTTTTCTAGGTCTCGAGATACTGCTCCCACCCCATCTGCTGCTGGCTCAGCTCGTCTCATTCTTTCCCTTACAGCAGGCCATCCAATCACACTACTTTTTGACCACTTGCCACCCATCTTATAGCAAAATCCTTTCCAAGCCCTGTCTTATTCTTCTAGGTATGTGGCGAATAGCTCTATAAGCTGCTTGTAATACTTCTATAACCCTATCTGTCCCCTCAGCTACTGCTATGGCTGTGGCATTGAGCAAGTTAACAGCACTATTCTTTAGTTCCTGACTCCAATACTGTAGGAGATTCCACCAATATTTGAGGGCTTCCCACCCCCTGCGTCCCAGAAGTTCCACAATCCTCGTTACAATCAAGAGTAAGTCTCTCAAGCGGTGGTAGCTGAAGAGGCACAGGCTCCGCAGATCGTCCCAGATAAGTGCTAAGGATCCGTTCACTAATCGAATGGATCTGTCTCTGTCTCTCTCTCCACCTTCTTCTTCTATTCCTTCGGGCCTGTCGGGTCCCCTCGGGATTGGGAGGTGGGTCTGAAACGATAATGGTGAATATCCCTGCCTAACTCTATTCACTATAGAAAGTACAGCAAAAACTATTCTTAAACCTACCAAGCCTCCTACTATCATTATGAATAATTTTATATACCACAGCCAATTTGTTATGTTAAACCAATTCCACAAACTTGCCCATTTATCTAATTCCAATAATTCTTGTTCATTCTTTTCTTGCTGGTTTTGCGATTCTTCAATTAAGGAGTGTATTAAGCTTGTGTAATTGTTAATTTCTCTGTCCCACTCCATCCAGGTCATGTTATTCCAAATCTGTTCCAGAGATTTATTACTCCAACTAGCATTCCAAGGCACAGCAGTGGTGCAAATGAGTTTTCCAGAGCAACCCCAAATCCCCAGGAGCTGTTGATCCTTTAGGTATCTTTCCACAGCCAGGATTCTTGCCTGGAGCTGTTTGATGCCCCAGACTGTGAGTTGCAACAGATGCTGTTGCGCCTCAATAGCCCTCAGCAAATTGTTCTGCTGCTGCACTATATCAGACAATAATTGTCTGGCCTGTACCGTCAGCGTCATTGACGTGCAGCCCATAGTGCTTCCTGCTGCTCCCAAGAACCCAAGGAACAAAGCTCCTATTCCCACTGCTCTTTTTTCTCTCTGCACCACTCTTCTCTTTGCCTTGGTGGGTGCTACTCCTAATGGTTCAATTTTTACTACTTTATATTTATATAATTCACTTCTCCAATTGTCCCTCATATCGCCTCCTCCAGGTCTGAAGATCTCGGACCCATTGTTGTTATTACCACCATCTCTTGTTAATAGCAGCCCAGTAATATTTGATGAACATCTAATTTGTCCACTGATGGGAGGGGCATACATTGCTTTTCCTACTTCCTGCCACATGTTTATAAATTGTTTTATTCTGCATGGGAGTGTGATTGTGTCACTTCCTTCAGTGTTATTTGACCCTTCAGTACTCCAAGTACTATTAAACCAAGTACTATTAAACAGTTGTGTTGAATTACAGTAGAAAAATTCCCCTCCACAATTAAAACTGTGCGTTACAATTTCTGGGTCCCCTCCTGAGGATTGCTTAAAGATTATTGTTTTATTATTTCCAAATTGTTCTCTTAATTTGCTAGCTATCTGTTTTAAAGTGGCATTCCATTTTGCTCTACTAATGTTACAATGTGCTTGTCTCATATTTCCTATTTTTCCTATTGTAACAAATGCTCTCCCTGGTCCCCTCTGGATACGGATACTTTTTCTTGTATTGTTGTTGGGTCTTGTACAATTAATTTCTACAGATGTGTTCAGCTGTACTATTATGGTTTTAGCATTGTCTGTGAAATTGGCAGATCTAATTACTACATCTTCTTCTGCTAGACTGCCATTTAACAGCAGTTGAGTTGATACTACTGGCCTGATTCCATGTGTACATTGTACTGTGCTGACATTTGTACATGGTCCTGTTCCATTGAACGTCTTATTATTACATTTTAGAATCGCAAAACCAGCCGGGGCACAATAATGTATGGGAATTGGCTCAAAGGATACCTTTGGACAGGCCTGTGTAATGACTGAGGTGTTACAACTTATCAACCTATAGCTGGTATTATCTATTGGTACTATATCAAGTTTATAAAAGAATGCATATTCTTTCTGCACCTTATCTCTTATGCTTGTGCTGATATTGAAAGAGCAGTTTTTTATCTCTCCTTTCTCCATTATCATTCTCCCGCTACTACTATTGGTATTAGTATCATTCTTCAAATCAGTGCACTTTAAACTAACACAGAGTGGGGTTAATTTTACACATGGCTTTAGGCTTTGATCCCATAAACTGATTATATCCTCATGCATCTGTTCTACCATGTCATTTTTCCACATGTTAAAATTTTCTGTCACATTTACCAATACTACTTCTTGTGGGTTGGGGTCTGTGGGTACACAGGCATGTGTGGCCCAAACATTATGTACCTCTGTATCATATGCTTTAGCATCTGATGCACAAAATAGAGTGGTGGTTGCTTCCTTCCACACAGGTACCCCATAATAGACTGTGACCCACAATTTTTCTGTAGCACTACAGATCATCAATATCCCAAGGAGCATGGTGCCCCATTTCCACCCCCATCTCCACAAGTGCTGATACTTCTCCTTCACTCTCATTGCCACTGTCTTCTGCTCTTTCTATTAGTCTATCAATTAACCTGTCTATTTTTCTTTGTCTTAATATTTTCCTATATTCTATGATTACTATGGACCACACAACTATTGCTATTATTATTGCTACTACTAATGCTACTATTGCTACTATTATAGGTTGCATTACATGTACTACTTACTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATTCTGAAATGGATAAACAGCAGTTGTTGCAGAATTCTTATTATGGCTTCCACTCCTGCCCAAGTATCCCCGTAAGTTTCATAGATATGTTGTCCTAAGTTATGGAGCCATATCCTAGGAAAATGTCTAACAGCTTCACTCTTAAGTTCCTCTAAAAGCTCTAGTGTCCATTCATTGTATGGCTCCCTCTGTGGCCCTTGGTCTTCTGGGGCTTGTTCCATCTGTCCTCTGTCAGTTTCCTAACACTAGGCAAAGGTGGCTTTATCTGTTTTGGTTTTATTAATGCTGCTAGTGCCAAGTACTGTAGAGATCCTACCTTGTTATGTCCTGCTTGATATTCACACCTAGGACTAACTATACGTCCTAATATGGTATTTCTTATAGCAGATTCTGAAAAACAATCAAAATAGTGCAGATGAATTAGTTGGTCTGCTAGGTCAGGGTCTACTTGTGTGCTATATCTCTTTTTCCTCCATTCTATGGAGACTCCCTGACCCAAATGCCAGTCTCTTTCTCCTGTATGCAGACCCCAATATGTTGTTATTACTAATTTAGCATCCCCTAGTGGGATGTGTACTTCTGAACTTATTTTTGGATTAGTACTTTCATAGTGATGTCTATAAAACCAGTCCTTAGCTTTCCTTGAAATATACATATGGTGTTTTACTAATCTTTTCCATGTGTTAATCCTCATCCTGTCTACTTGCCACACAATCATCACCTGCCATCTGTTTTCCATAATCCCTGATGATCTTTGCTTTTCTTCTTGGCACTACTTTTATGTCACTATTATCTTGTATTACTACTGCCCCTTCACCTTTCCAGAGGAGCTTTGCTGGTCCTTTCCAAACTGGATCTCTGCTGTCCCTGTAATAAACCCGAAAATTTTGAATTTTTGTAATTTGTTTTTGTAATTCTTTAGTTTGTATGTCTGTTGCTATTATGTCTACTATTCTTTCCCCTGCACTGTACCCCCCAATCCCCCCTTTTCTTTTAAAATTGTGGATGAATACTGCCATTTGTACTGCTGTCTTAAGATGTTCAGCCTGATCTCTTACCTGTCCTATAATTTTCTTTAATTCTTTATTCATAGATTCTATTACTCCTTGACTTTGGGGATTGTAGGGAATGCCAAATTCCTGCTTGATCCCCGCCCACCAACAGGCGGCCTTAACTGTAGTACTGGTGAAATTGCTGCCATTGTCTGTATGTACTGTTTTTACTGGCCATCTTCCTGCTAATTTTAAGAGGAAGTATGCTGTTTCTTGCCCTGTCTCTGCTGGAATTACTTCTGCTTCTATATATCCACTGGCTACATGAACTGCTACCAAGATAACTTTTCCTTCTAAATGTGTACAATCTAGCTGCCATATTCCTGGGCTACAGTCTACTTGTCCATGCATGGCTTCCCCTTTTAGCTGACATTTATCACAGCTGGCTACTATTTCTTTTGCTACTACAGGTGGTAGGTTAAAATCACTAGCCATTGCTCTCCAATTACTGTGATATTTCTCATGTTCTTCTTGGGCCTTATCTATTCCATCTAAAAATAGTACTTTCCTGATTCCAGCACTGACCAACCCATCTACTTGTTCATTTCCTCCAATTCCTTTGTGTGCTGGTACCCATGCCAGGTAGACTTTTTCCTTTTTTATTAACTGCTCTATTATTTGACTGACTAACTCTGATTCACTCTTATCTGGTTGTGCTTGAATGATTCCCAATGCATATTGTGAGTCTGTCACTATGTTTACTTCTAATCCCGAATCCTGCAAAGCTAGATGAATTGCTTGTAACTCAGTCTTCTGATTTGTTGTGTCCGTTAGGGGGACAACTTTTTGTCTTCCTCTGTCAGTTACATATCCTGCTTTTCCTAATTTAGTTTCCCTATTGGCTGCCCCATCTACATAGAAAGTTTCTGCTCCTATTATGGGTTCTTTCTCTAACTGGTACCATAACTTCACTAAGGGAGGGGTATTGACAAACTCCCACTCAGGAATCCAGGTGGCTTGCCAATACTCTGTCCACCATGCTTCCCATGTTTCCTTTTGTATGGGTAATTTAAATTTAGGAGTCTTTCCCCATATTACTATGCTTTCTGTGGCTATTTTTTGTACTGCCTCTGTTAATTGTTTCACATCATTAGTGTGGGCACCCTTCATTCTTGCATATTTTCCTGTTTTCAGATTTTTAAATGGCTCTTGATAAATTTGATATGTCCATTGGCCTTGCCCCTGCTTCTGTATTTCTGCTATTAAGTCTTTTGATGGGTCATAATACACTCCATGTACCGGTTCTTTTAGAATCTCCCTGTTTTCTGCCAGTTCTAGCTCTGCTTCTTCTGTTAGTGGTACTACTTCTGTTAGTGCTTTGGTTCCCCTAAGAAGTTTACATAATTGCCTTACTTTAATCCCTGCATAAATCTGACTTGCCCAATTCAATTTTCCCACTAATTTCTGTATGTCATTGACAGTCCAGCTGTCCTTTTCTGGCAGCACTATAGGCTGTACTGTCCATTTATCAGGATGGAGTTCATAACCCATCCAAAGGAATGGAGGTTCTTTCTGATGTTTTTTGTCTGGTGTGGTAAATCCCCACCTCAACAGATGTTGTCTCAGTTCCTCTATTTTTGTTCTATGCTGCCCTATTTCTAAGTCAGATCCTACATACAAATCATCCATGTATTGATAGATGACTATGTCTGGATTTTGTTTTCTAAAAGGCTCTAAGATTTTTGTCATGCTACACTGGAATATTGCTGGTGATCCTTTCCATCCCTGTGGAAGCACATTGTACTGATATCTAATCCCTGGTGTCTCATTGTTTATACTAGGTATGGTAAATGCAGTATACTTCCTGAAGTCTTTATCTAAGGGAACTGAAAAATATGCATCGCCCACATCCAGTACTGTTACTGATTTTTTCTGTTTTAACCCTGCAGGATGTGGTATTCCTAATTGAACTTCCCAGAAATCTTGAGTTCTCTTATTAAGTTCTCTGAAATCTACTAATTTTCTCCATTTAGTACTGTCTTTTTTCTTTATGGCAAATACTGGAGTATTGTATGGATTTTCAGGCCCAATTTTTGAAATTTTTCCTTCCTTTTCCATTTCTGTACAAATTTCTACTAATGCTTTTATTTTTTCTTCTGTCAATGGCCATTGTTTAACTTTTGGGCCATCCATTCCTGGCTTTAATTTTACTGGTACAGTCTCAATAGGACTAATGGGAAAATTTAAAGTGCAGCCAATCTGAGTCAACAGATTTCTTCCAATTATGTTGACAGGTGTAGGTCCTACTAATACTGTACCTATAGCTTTATGTCCGCAGATTTCTATGAGTATCTGATCATACTGTCTTACTTTGATAAAACCTCCAATTCCCCCTATCATTTTTGGTTTCCATCTTCCTGGCAAATTCATTTCTTCTAATACTGTATCATCTGCTCCTGTATCTAATAGAGCTTCCTTTAATTGCCCCCCTATCTTTATTGTGACGAGGGGTCGCTGCCAAAGAGTGATCTGAGGGAAGCTAAAGGATACAGTTCCTTGTCTATCGGCTCCTGCTTCTGAGAGGGAGTTGTTGTCTCTTCCCCAAACCTGAAGCTCTCTTCTGGTGGGGCTGTTGGCTCTGGTCTGCTCTGAAGAAAATTCCCTGGCCTTCCCTTGTGGGAAGGCCAGATCTTCCCTAAAAAATTAGCCTGTCTCTCAGTACAATCTTTCATTTGGTGTCCTTCCTTTCCACATTTCCAACAGCCCTTTTTCCTAGGGGCCCTGCAATTTTTGGCTATGTGCCCTTCTTTGCCACAATTGAAACACTTAACAGTCTTTCTTTGGTTCCTAAAATTGCCTTTCTGTATCATTATGGTAGCTGGATTTGTTACTTGGCTCATTGCTTCAGCCAAAACTCTTGCTTTATGGCCGGGTCCCCCCACTCCCTGACATGCTGTCATCATTTCTTCTAGTGTCGCTCCTGGTCCCAATGCTTTTAAAATAGTCTTACAATCTGGGTTCGCATTTTGGACCAACAAGGTTTCTGTCATCCAATTTTTTACCTCTTGTGAAGCTTGCTCGGCTCTTAGAGTTTTATAGAATCGGTCTACATAGTCTCTAAAGGGTTCCTTTGGTCCTTGTCTTATGTCCAGAATGCTGGTAGGGCTATACATTCTTACTATTTTATTTAATCCCAGGATTATCCATCTTTTATAGATTTCTCCTACTGGGATAGGTGGATTATGTGTCATCCATCCTATTTGTTCCTGAAGGGTACTAGTAGTTCCTGCTATGTCACTTCCCCTTGGTTCTCTCATCTGGCCTGGTGCAATAGGCCCTGCATGCACTGGATGCAATCTATCCCATTCTGCAGCTTCCTCATTGATGGTCTCTTTTAACATTTGCATGGCTGCTTGATGTCCCCCCACTGTGTTTAGCATGGTATTTAAATCTTGTGGGGTGGCTCCTTCTGATAATGCTGAAAACATGGGTATTACTTCTGGGCTGAAAGCCTTCTCTTCTACTACTTTTACCCATGCATTTAAAGTTCTAGGTGATATGGCCTGATGTACCATTTGCCCCTGGAGGTTCTGCACTATAGGGTAATTTTGGCTGACCTGGCTGTTGTTTCCTGTGTCAGCTGCTGCTTGCTGTGCCTTTTTCTTACTTTTGTTTTGCTCTTCCTCTATCTTATCTAAGGCTTCCTTGGTGTCTTTTACATCTATCCTTTGATGCACACAATAGAGGACTGCTATTGTATTATATAATGATCTAAGTTCTTCTGATCCTGTCTGAAGGGATGGTTGTAGCTGTCCCAGTATTTGTCTACAGCCTTCTGATGTCTCTAAAAGGCCAGGATTAACTGCGAATCGTTCTAGCTCCCTGCTTGCCCATACTATATGTTTTAGTTTATATTGTTTCTTTCCCCCTGGCCTTAACCGAATTTTTTCCCATTTATCTAATTCTCCCCCGCTTAATACCGACGCTCTCGCACCCATCTCTCTCCTTCTAGCCTCCGCTAGTCAAAATTTTTGGCGTACTCACCAGTCGCCGCCCCTCGCCTCTTGCCGTGCGCGCTTCAGCAAGCCGAGTCCTGCGTCGAGAGATCTCCTCTGGCTTTACTTTCGCTTTCAAGTCCCTGTTCGGGCGCCACTGCTAGAGATTTTCCACACTGACTAAAAGGGTCTGAGGGATCTCTAGTTACCAGAGTCACACAACAGACGGGCACACACTACTTTGAGCACTCAAGGCAAGCTTTATTGAGGCTTAAGCAGTGGGTTCCCTAGTTAGCCAGAGAGCTCCCAGGCTCAGATCTGGTCTAACCAGAGAGACCCAGTACAGGCAAAAAGCAGCTGCTTATATGTAGCATCTGAGGGCTCGCCACTCCCCAGTCCCGCCCAGGCCACACCTCCCTGGAAAGTCCCCAGCGGAAAGTCCCTTGTAGAAAGCTCGATGTCAGCAGTCTTTGTAGTACTCCGGATGCAGCTCTCGGGCCATGTGACGAAATGCTAGGAGGCTGTCAAACTTCCACACTAATACTTCTCCCTCCGGGTCCTCCATCCCATGCTGGCTCATAGGGTGTAACAAGCTGTTCTTCTCTCCTTATTTGGCCTCTTCTACTTGCTCTGGTTCAACTGGTACTAACTTGAAGCACCATCCAAAGGTCAGTGGATATCTGATCCCTGGCCCTGGTGTGTAGTTCTGCCAATCAGGGAAGTAGCCTTGTGTGTGGTAGATCCACAGATCAAGGATCTCTTGTCTTTTTTGGGACCAAATTAGCCCTTCCA"
$refRClength = $refRC.length()


def closeEnough?(sequence, reference, maxAllowedEditDistance)
    scoreTable = []
    
    l = reference.length()
    s = sequence.length()
    #    puts l, s
    (s + 1).times do
        scoreTable << []
    end
    
    #reference is across the top
    #test sequence is on the left column
    #initialize score table
    #initialize top row
    for xidx in 0..l
        scoreTable[0] << xidx
    end
    #initialize first column
    for xidx in 1..s
        scoreTable[xidx] << xidx
    end
    
    #and now we come to the actual alignment
    for referenceIdx in 0...s # does NOT include final length
        for sequenceIdx in 0...l
            diag = scoreTable[referenceIdx][sequenceIdx]
            left = scoreTable[referenceIdx + 1][sequenceIdx]
            up = scoreTable[referenceIdx][sequenceIdx + 1]
            if reference[referenceIdx] == sequence[sequenceIdx] # it's a perfect match
                #append the values to the reference index row array
                minScore = [diag, left + 1, up + 1].min
                scoreTable[referenceIdx + 1] << minScore
                else #they don't match, cost to mutate = 1, cost to insert or delete = 1
                minScore = [diag + 1, left + 1, up + 1].min
                scoreTable[referenceIdx + 1] << minScore
            end
        end
    end
    #editDistance = scoreTable[s][l] #this lines up the dangling ends
    editDistance = scoreTable[s].min() #this leaves off the dangling ends
    if editDistance <= maxAllowedEditDistance
        return true
        else
        return false
    end
end



def findForwardPrimerRemoveDimers(fSequence)  #did the forward primer prime at the correct location
    #same for either size class
    #illumina sequence in rp:GTGACTGGAGTTCAGACGTGTGCTCTTCCGATCT
    #rc of above: AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC
    # a one base mutation in above looks like pre D1: CGACTG
    if pdIdx = fSequence.index("AGATCGGAAGAG") and pdIdx < 72 # it has rp Illumina in the beginning of the forward read - it's a primer dimer, must be found >= (14 + 15) past D1 to get valid info and not use the PID or Illumina reverse sequence for matching
        #44 is base after D1 cut 44 + 29 - 1 =
        return "primerDimer"
    # check that forward primer primes to the correct post-primer sequence
    # forward primer : ILLUMINA NNNNTGCTGAAGCGCGCACGGCAAG  #25 bases long
    # post forward primer: caag | AGGCGAGGGGCGGCGACTGG
    elsif fSequence[0, 15] =~ /(\w{4})TGCTGAAGC/ or closeEnough?(fSequence[4, 15], "TGCTGAAGCGCGCAC", 2)
        #puts fSequence.index("AGGCGAGGGG") #25
        if fSequence[25,10] == "AGGCGAGGGG"
            return "forwardCorrectPrime"
        elsif closeEnough?(fSequence[25,15], "AGGCGAGGGGCGGCG", 2)
            return "forwardCorrectPrime"
        else
            return "forwardIncorrectPrime"
        end
    else
        return "forwardIncorrectPrime"
    end
end



#this method works for matching to $ref (forward reference starting at D1) or to the full length reverse reference $refRC.
def identifyAcceptorAnywhere(unknownAcceptorSequence, reference, reverse=false)
    if searchIdx = reference.index(unknownAcceptorSequence)
        if reverse == false #looking at forward reads, only from D1 on
            actualAcceptorIndex = searchIdx + 1 + 743 #index of post D1, +1 because Ruby indexes at 0, NL4-3 D1 at 743
            return actualAcceptorIndex
            else #reverse == true, output forward index
            refLength = reference.length()
            actualAcceptorIndex = refLength - searchIdx
            return actualAcceptorIndex
        end
    end # sequence not found in reference
    return nil
end


def identifyReverseBindingSiteSpliced(unknownBindingSequence, spliceType0, spliceType1)
    #spliceType0 is the transcript class, spliceType1 is the specific transcript
    #unknownBindingSequence is from the reverse read
    if spliceType0 == "1.8 KB" #this reference goes from end to A7 to D4 and stops at A5
        #with Ruby indexes
        #ref starts at 0 through 1341 (A7); skips to 3665 (D4) and continues to A5, but nothing can bind that far and still have size class info
        ref = "TGCTAGAGATTTTCCACACTGACTAAAAGGGTCTGAGGGATCTCTAGTTACCAGAGTCACACAACAGACGGGCACACACTACTTGAAGCACTCAAGGCAAGCTTTATTGAGGCTTAAGCAGTGGGTTCCCTAGTTAGCCAGAGAGCTCCCAGGCTCAGATCTGGTCTAACCAGAGAGACCCAGTACAGGCAAAAAGCAGCTGCTTATATGCAGCATCTGAGGGCTCGCCACTCCCCAGTCCCGCCCAGGCCACGCCTCCCTGGAAAGTCCCCAGCGGAAAGTCCCTTGTAGCAAGCTCGATGTCAGCAGTTCTTGAAGTACTCCGGATGCAGCTCTCGGGCCACGTGATGAAATGCTAGGCGGCTGTCAAACCTCCACTCTAACACTTCTCTCTCAGGGTCATCCATTCCATGCAGGCTCACAGGGTGTAACAAGCTGGTGTTCTCTCCTTTATTGGCCTCTTCTACCTTATCTGGCTCAACTGGTACTAGCTTGTAGCACCATCCAAAGGTCAGTGGATATCTGACCCCTGGCCCTGGTGTGTAGTTCTGCCAATCAGGGAAGTAGCCTTGTGTGTGGTAGATCCACAGATCAAGGATATCTTGTCTTCTTTGGGAGTGAATTAGCCCTTCCAGTCCCCCCTTTTCTTTTAAAAAGTGGCTAAGATCTACAGCTGCCTTGTAAGTCATTGGTCTTAAAGGTACCTGAGGTGTGACTGGAAAACCCACCTCTTCCTCCTCTTGTGCTTCTAGCCAGGCACAAGCAGCATTGTTAGCTGCTGTATTGCTACTTGTGATTGCTCCATGTTTTTCTAGGTCTCGAGATACTGCTCCCACCCCATCTGCTGCTGGCTCAGCTCGTCTCATTCTTTCCCTTACAGCAGGCCATCCAATCACACTACTTTTTGACCACTTGCCACCCATCTTATAGCAAAATCCTTTCCAAGCCCTGTCTTATTCTTCTAGGTATGTGGCGAATAGCTCTATAAGCTGCTTGTAATACTTCTATAACCCTATCTGTCCCCTCAGCTACTGCTATGGCTGTGGCATTGAGCAAGTTAACAGCACTATTCTTTAGTTCCTGACTCCAATACTGTAGGAGATTCCACCAATATTTGAGGGCTTCCCACCCCCTGCGTCCCAGAAGTTCCACAATCCTCGTTACAATCAAGAGTAAGTCTCTCAAGCGGTGGTAGCTGAAGAGGCACAGGCTCCGCAGATCGTCCCAGATAAGTGCTAAGGATCCGTTCACTAATCGAATGGATCTGTCTCTGTCTCTCTCTCCACCTTCTTCTTCTATTCCTTCGGGCCTGTCGGGTCCCCTCGGGATTGGGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTC"
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 1341  #post A7
                actualAcceptorIndex = $refRClength - searchIdx
                return actualAcceptorIndex
                elsif searchIdx > 1341 #between D4 and a bit upstream of
                adaptIdx = searchIdx - 1341 + 3665 #3665 is the offset for D4
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    #4KB and UNSPLICED can use the reverse compliment as a reference without any alterations
    elsif spliceType0 == "4 KB"
        bindingIndex = identifyAcceptorAnywhere(unknownBindingSequence, $refRC, reverse=true)
        return bindingIndex
    
    elsif spliceType0 == "UNSPLICED"
        bindingIndex = identifyAcceptorAnywhere(unknownBindingSequence, $refRC, reverse=true)
        return bindingIndex
    
    
    elsif spliceType1 == "A5a" #direct splice from D1, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A5a (3734), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCAGTCGCCGCCCCTCGCCTC"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A5a   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTC  10 through 78
        #at D1       CAGTCGCCGCCCCTCGCCTC  79 through  98
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 78)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 offset
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
        
    elsif spliceType1 == "A5b" #direct splice from D1, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A5b (3730), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCAGTCGCCGCCCCTCGCCTC"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A5b   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTT  10 through 74
        #at D1       CAGTCGCCGCCCCTCGCCTC  75 through  94
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 74)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 offset
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    elsif spliceType1 == "A4b" #direct splice from D1, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4b (3750), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCAGTCGCCGCCCCTCGCCTC"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4b   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGC  10 through 94
        #at D1       CAGTCGCCGCCCCTCGCCTC  95 through  114
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 94)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
        
    
    elsif spliceType1 == "A4a" #direct splice from D1, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4a (3756), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCAGTCGCCGCCCCTCGCCTC"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4a   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGG  10 through 100
        #at D1       CAGTCGCCGCCCCTCGCCTC  101 through  120
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 100)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A4c" #direct splice from D1, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4c (3774), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACAGTCGCCGCCCCTCGCCTC"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4c   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAA  10 through 118
        
        #at D1       CAGTCGCCGCCCCTCGCCTC  119 through  138
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 118)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A4d" #direct splice from D1, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4d (3793), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACACAGTCGCCGCCCCTCGCCTC"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4d   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACA  10 through 137
        #at D1       CAGTCGCCGCCCCTCGCCTC  138 through  157
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 137)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A3" #direct splice from D1, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A3 (3933), jumps to D1
        ref = "GGAGGTGGGTCTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATTCAGTCGCCGCCCCTCGCCTC"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A3    CTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATT 10 through 274
        #at D1       CAGTCGCCGCCCCTCGCCTC  275 through  294
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 274)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A1D2A5a" #splice from SX1 to A5a, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A5a (3734), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTTTCCAGAGGAGCTTTGCT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A5a   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTC  10 through 78
        #at D2       CTTTCCAGAGGAGCTTTGCT  79 through  98
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 78)) #between D4 and A5a
                #puts "here"
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A1D2A5b" #splice from SX1 to A5a, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A5b (3730), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTTCCAGAGGAGCTTTGCT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A5b   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTT  10 through 74
        #at D2       CTTTCCAGAGGAGCTTTGCT  75 through  94
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 74)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    elsif spliceType1 == "A1D2A4b" #splice from SX1 to A4b, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4b (3750), jumps to D2
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTTTCCAGAGGAGCTTTGCT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4b   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGC  10 through 94
        #at D2       CTTTCCAGAGGAGCTTTGCT       95 through  114
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 94)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
        
    
    
    elsif spliceType1 == "A1D2A4a" #splice from SX1 to A4a, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4a (3756), jumps to D2
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTCCAGAGGAGCTTTGCT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4a   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGG  10 through 100
        #at D2        CTTTCCAGAGGAGCTTTGCT 101 through  120
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 100)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A1D2A4c" #splice from SX1 to A4c, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4c (3774), jumps to D2
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTTCCAGAGGAGCTTTGCT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4c   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAA  10 through 118
        #at D2   CTTTCCAGAGGAGCTTTGCT      119 through  138
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 118)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A1D2A4d" #splice from SX1 to A4d, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4d (3793), jumps to D2
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACACTTTCCAGAGGAGCTTTGCT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4d   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACA  10 through 137
        #at D2   CTTTCCAGAGGAGCTTTGCT    138 through  157
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 137)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A1D2A3" #splice from SX1 to A3, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A3 (3933), jumps to D2
        ref = "GGAGGTGGGTCTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATTCTTTCCAGAGGAGCTTTGCT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A3    CTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATT 10 through 274
        #at D2   CTTTCCAGAGGAGCTTTGCT      275 through  294
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 274)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A1D2A2Vpr" or spliceType1 == "A1D2A2Vpx" #splice from SX1 to A2 final, size info is not known
        #no size class info available. Reference starts upstream of D4, continues to A2/D2 junction, but can't be bound upstream of D2
        ref = "TCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATTCTGAAATGGATAAACAGCAGTTGTTGCAGAATTCTTATTATGGCTTCCACTCCTGCCCAAGTATCCCCGTAAGTTTCATAGATATGTTGTCCTAAGTTATGGAGCCATATCCTAGGAAAATGTCTAACAGCTTCACTCTTAAGTTCCTCTAAAAGCTCTAGTGTCCATTCATTGTATGGCTCCCTCTGTGGCCCTTGGTCTTCTGGGGCTTGTTCCATCTGTCCTCTGTCAGTTTCCTAACACTAGGCAAAGGTGGCTTTATCTGTTTTGGTTTTATTAATGCTGCTAGTGCCAAGTACTGTAGAGATCCTACCTTGTTATGTCCTGCTTGATATTCACACCTAGGACTAACTATACGTCCTAATATGGTATTTCTTATAGCAGATTCTTTCCAGAGGAGCTTTGCT"
        #A2 is @ 4321, start search upstream of D4 at 3721 to A2 @ 4320:  #TCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATTCTGAAATGGATAAACAGCAGTTGTTGCAGAATTCTTATTATGGCTTCCACTCCTGCCCAAGTATCCCCGTAAGTTTCATAGATATGTTGTCCTAAGTTATGGAGCCATATCCTAGGAAAATGTCTAACAGCTTCACTCTTAAGTTCCTCTAAAAGCTCTAGTGTCCATTCATTGTATGGCTCCCTCTGTGGCCCTTGGTCTTCTGGGGCTTGTTCCATCTGTCCTCTGTCAGTTTCCTAACACTAGGCAAAGGTGGCTTTATCTGTTTTGGTTTTATTAATGCTGCTAGTGCCAAGTACTGTAGAGATCCTACCTTGTTATGTCCTGCTTGATATTCACACCTAGGACTAACTATACGTCCTAATATGGTATTTCTTATAGCAGATT
        #at D2   CTTTCCAGAGGAGCTTTGCT
        if searchIdx = ref.index(unknownBindingSequence)
            actualAcceptorIndex = $refRClength - (3721 + searchIdx)
            return actualAcceptorIndex
            else
            return nil
        end
        return nil
    
    
    elsif spliceType1 == "A2D3A5a" or spliceType1 == "A1D2A2D3A5a" #splice fromSX2 to A5a, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A5a (3734), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTTGTTATGTCCTGCTTGAT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A5a   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTC  10 through 78
        #at D3      CTTGTTATGTCCTGCTTGAT  79 through  98
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 78)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A2D3A5b" or spliceType1 == "A1D2A2D3A5b" #splice fromSX2 to A5a, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A5b (3730), jumps to D1
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTGTTATGTCCTGCTTGAT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A5b   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTT  10 through 74
        #at D3      CTTGTTATGTCCTGCTTGAT  75 through  94
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 74)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
        
    elsif spliceType1 == "A2D3A4b" or spliceType1 == "A1D2A2D3A4b" #splice fromSX2 to A4b, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4b (3750), jumps to D2
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTTGTTATGTCCTGCTTGAT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4b   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGC  10 through 94
        #at D3      CTTGTTATGTCCTGCTTGAT       95 through  114
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 94)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
        
    
    
    elsif spliceType1 == "A2D3A4a" or spliceType1 == "A1D2A2D3A4a" #splice fromSX2 to A4a, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4a (3756), jumps to D2
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTGTTATGTCCTGCTTGAT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4a   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGG  10 through 100
        #at D3       CTTGTTATGTCCTGCTTGAT 101 through  120
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 100)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A2D3A4c" or spliceType1 == "A1D2A2D3A4c" #splice fromSX2 to A4c, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4c (3774), jumps to D2
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGTTATGTCCTGCTTGAT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4c   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAA  10 through 118
        #at D3  CTTGTTATGTCCTGCTTGAT      119 through  138
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 118)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A2D3A4d" or spliceType1 == "A1D2A2D3A4d" #splice fromSX2 to A4d, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A4d (3793), jumps to D2
        ref = "GGAGGTGGGTTGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACACTTGTTATGTCCTGCTTGAT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A4d   TGCTTTGATAGAGAAGCTTGATGAGTCTGACTGTTCTGATGAGCTCTTCGTCGCTGTCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACA  10 through 137
        #at D3  CTTGTTATGTCCTGCTTGAT    138 through  157
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 137)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A2D3A3" or spliceType1 == "A1D2A2D3A3" #splice fromSX2 to A3, size info is not known
        #no size class info available. reference starts at 10 before A7 (1331 to 1341), jumps to D4 (3665) and goes to A3 (3933), jumps to D2
        ref = "GGAGGTGGGTCTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATTCTTGTTATGTCCTGCTTGAT"
        #1331-1341   GGAGGTGGGT  0 through 9
        #D4 to A3    CTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATT 10 through 274
        #at D3  CTTGTTATGTCCTGCTTGAT      275 through  294
        if searchIdx = ref.index(unknownBindingSequence)
            if searchIdx <= 9 #post A7
                actualAcceptorIndex = $refRClength - (1331 + searchIdx)
                return actualAcceptorIndex
                elsif ((searchIdx >= 10)  and (searchIdx <= 274)) #between D4 and A5a
                adaptIdx = 3665 + searchIdx  #D4 off set
                actualAcceptorIndex = $refRClength - adaptIdx
                return actualAcceptorIndex
            end
        end
        return nil
    
    
    elsif spliceType1 == "A2Vpr" or spliceType1 == "A2Vpx" #Direct splice to A2 final, size info is not known
        #no size class info available. Reference starts @ upstream of D4, jumps to D2, but can't be bound within D2
        ref = "TCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATTCTGAAATGGATAAACAGCAGTTGTTGCAGAATTCTTATTATGGCTTCCACTCCTGCCCAAGTATCCCCGTAAGTTTCATAGATATGTTGTCCTAAGTTATGGAGCCATATCCTAGGAAAATGTCTAACAGCTTCACTCTTAAGTTCCTCTAAAAGCTCTAGTGTCCATTCATTGTATGGCTCCCTCTGTGGCCCTTGGTCTTCTGGGGCTTGTTCCATCTGTCCTCTGTCAGTTTCCTAACACTAGGCAAAGGTGGCTTTATCTGTTTTGGTTTTATTAATGCTGCTAGTGCCAAGTACTGTAGAGATCCTACCTTGTTATGTCCTGCTTGATATTCACACCTAGGACTAACTATACGTCCTAATATGGTATTTCTTATAGCAGATTCAGTCGCCGCCCCTCGCCTC"
        #A2 is @ 4321, start search upstream of D4 at 3721 to A2 @ 4320:  #TCTCCGCTTCTTCCTGCCATAGGAGATGCCTAAGGCTTTTGTCATGAAACAAACTTGGCAATGAAAGCAACACTTTTTACAATAGCAATTGGTACAAGCAGTTTTAGGCTGACTTCCTGGATGCTTCCAGGGCTCTAGTCTAGGATCTACTGGCTCCATTTCTTGCTCTCCTCTGTCGAGTAACGCCTATTCTGCTATGTCGACACCCAATTCTGAAATGGATAAACAGCAGTTGTTGCAGAATTCTTATTATGGCTTCCACTCCTGCCCAAGTATCCCCGTAAGTTTCATAGATATGTTGTCCTAAGTTATGGAGCCATATCCTAGGAAAATGTCTAACAGCTTCACTCTTAAGTTCCTCTAAAAGCTCTAGTGTCCATTCATTGTATGGCTCCCTCTGTGGCCCTTGGTCTTCTGGGGCTTGTTCCATCTGTCCTCTGTCAGTTTCCTAACACTAGGCAAAGGTGGCTTTATCTGTTTTGGTTTTATTAATGCTGCTAGTGCCAAGTACTGTAGAGATCCTACCTTGTTATGTCCTGCTTGATATTCACACCTAGGACTAACTATACGTCCTAATATGGTATTTCTTATAGCAGATT
        #at D1  CAGTCGCCGCCCCTCGCCTC
        if searchIdx = ref.index(unknownBindingSequence)
            actualAcceptorIndex = $refRClength - (3721 + searchIdx)
            return actualAcceptorIndex
            else
            return nil
        end
        return nil
    
    
    elsif spliceType1 == "A1Vif" #splice to A1 final, size info is not known
        #no size class info available. Reference starts @ upstream of D4, jumps to D1 but can't be bound upstream of D1
        ref = "TTTTGGTTTTATTAATGCTGCTAGTGCCAAGTACTGTAGAGATCCTACCTTGTTATGTCCTGCTTGATATTCACACCTAGGACTAACTATACGTCCTAATATGGTATTTCTTATAGCAGATTCTGAAAAACAATCAAAATAGTGCAGATGAATTAGTTGGTCTGCTAGGTCAGGGTCTACTTGTGTGCTATATCTCTTTTTCCTCCATTCTATGGAGACTCCCTGACCCAAATGCCAGTCTCTTTCTCCTGTATGCAGACCCCAATATGTTGTTATTACTAATTTAGCATCCCCTAGTGGGATGTGTACTTCTGAACTTATTTTTGGATTAGTACTTTCATAGTGATGTCTATAAAACCAGTCCTTAGCTTTCCTTGAAATATACATATGGTGTTTTACTAATCTTTTCCATGTGTTAATCCTCATCCTGTCTACTTGCCACACAATCATCACCTGCCATCTGTTTTCCATAATCCCTGATGATCTTTGCTTTTCTTCTTGGCACTACTTTTATGTCACTATTATCTTGTATTACTACTGCCCCTTCACCTTTCCAGAGGAGCTTTGCTGGTCCTTTCCAAACTGGATCTCTGCTGTCCCAGTCGCCGCCCCTCGCCTC"
        #A1 is @ 4798 , start search upstream of D4 at 4198 to A1 :
        #TTTTGGTTTTATTAATGCTGCTAGTGCCAAGTACTGTAGAGATCCTACCTTGTTATGTCCTGCTTGATATTCACACCTAGGACTAACTATACGTCCTAATATGGTATTTCTTATAGCAGATTCTGAAAAACAATCAAAATAGTGCAGATGAATTAGTTGGTCTGCTAGGTCAGGGTCTACTTGTGTGCTATATCTCTTTTTCCTCCATTCTATGGAGACTCCCTGACCCAAATGCCAGTCTCTTTCTCCTGTATGCAGACCCCAATATGTTGTTATTACTAATTTAGCATCCCCTAGTGGGATGTGTACTTCTGAACTTATTTTTGGATTAGTACTTTCATAGTGATGTCTATAAAACCAGTCCTTAGCTTTCCTTGAAATATACATATGGTGTTTTACTAATCTTTTCCATGTGTTAATCCTCATCCTGTCTACTTGCCACACAATCATCACCTGCCATCTGTTTTCCATAATCCCTGATGATCTTTGCTTTTCTTCTTGGCACTACTTTTATGTCACTATTATCTTGTATTACTACTGCCCCTTCACCTTTCCAGAGGAGCTTTGCTGGTCCTTTCCAAACTGGATCTCTGCTGTCC
        #at D1  CAGTCGCCGCCCCTCGCCTC
        if searchIdx = ref.index(unknownBindingSequence)
            actualAcceptorIndex = $refRClength - (4198 + searchIdx)
            return actualAcceptorIndex
            else
            return nil
        end
        return nil
    
    
    elsif spliceType1 == "NEF 1" #splice to A1 final, size info is not known
        #no size class info available. Reference starts @ end of genome and goes to A7, jumps to D1 but can't be bound upstream of D1
        ref = "TGCTAGAGATTTTCCACACTGACTAAAAGGGTCTGAGGGATCTCTAGTTACCAGAGTCACACAACAGACGGGCACACACTACTTGAAGCACTCAAGGCAAGCTTTATTGAGGCTTAAGCAGTGGGTTCCCTAGTTAGCCAGAGAGCTCCCAGGCTCAGATCTGGTCTAACCAGAGAGACCCAGTACAGGCAAAAAGCAGCTGCTTATATGCAGCATCTGAGGGCTCGCCACTCCCCAGTCCCGCCCAGGCCACGCCTCCCTGGAAAGTCCCCAGCGGAAAGTCCCTTGTAGCAAGCTCGATGTCAGCAGTTCTTGAAGTACTCCGGATGCAGCTCTCGGGCCACGTGATGAAATGCTAGGCGGCTGTCAAACCTCCACTCTAACACTTCTCTCTCAGGGTCATCCATTCCATGCAGGCTCACAGGGTGTAACAAGCTGGTGTTCTCTCCTTTATTGGCCTCTTCTACCTTATCTGGCTCAACTGGTACTAGCTTGTAGCACCATCCAAAGGTCAGTGGATATCTGACCCCTGGCCCTGGTGTGTAGTTCTGCCAATCAGGGAAGTAGCCTTGTGTGTGGTAGATCCACAGATCAAGGATATCTTGTCTTCTTTGGGAGTGAATTAGCCCTTCCAGTCCCCCCTTTTCTTTTAAAAAGTGGCTAAGATCTACAGCTGCCTTGTAAGTCATTGGTCTTAAAGGTACCTGAGGTGTGACTGGAAAACCCACCTCTTCCTCCTCTTGTGCTTCTAGCCAGGCACAAGCAGCATTGTTAGCTGCTGTATTGCTACTTGTGATTGCTCCATGTTTTTCTAGGTCTCGAGATACTGCTCCCACCCCATCTGCTGCTGGCTCAGCTCGTCTCATTCTTTCCCTTACAGCAGGCCATCCAATCACACTACTTTTTGACCACTTGCCACCCATCTTATAGCAAAATCCTTTCCAAGCCCTGTCTTATTCTTCTAGGTATGTGGCGAATAGCTCTATAAGCTGCTTGTAATACTTCTATAACCCTATCTGTCCCCTCAGCTACTGCTATGGCTGTGGCATTGAGCAAGTTAACAGCACTATTCTTTAGTTCCTGACTCCAATACTGTAGGAGATTCCACCAATATTTGAGGGCTTCCCACCCCCTGCGTCCCAGAAGTTCCACAATCCTCGTTACAATCAAGAGTAAGTCTCTCAAGCGGTGGTAGCTGAAGAGGCACAGGCTCCGCAGATCGTCCCAGATAAGTGCTAAGGATCCGTTCACTAATCGAATGGATCTGTCTCTGTCTCTCTCTCCACCTTCTTCTTCTATTCCTTCGGGCCTGTCGGGTCCCCTCGGGATTGGGAGGTGGGTCAGTCGCCGCCCCTCGCCTC"
        #from end to A7:
        #TGCTAGAGATTTTCCACACTGACTAAAAGGGTCTGAGGGATCTCTAGTTACCAGAGTCACACAACAGACGGGCACACACTACTTGAAGCACTCAAGGCAAGCTTTATTGAGGCTTAAGCAGTGGGTTCCCTAGTTAGCCAGAGAGCTCCCAGGCTCAGATCTGGTCTAACCAGAGAGACCCAGTACAGGCAAAAAGCAGCTGCTTATATGCAGCATCTGAGGGCTCGCCACTCCCCAGTCCCGCCCAGGCCACGCCTCCCTGGAAAGTCCCCAGCGGAAAGTCCCTTGTAGCAAGCTCGATGTCAGCAGTTCTTGAAGTACTCCGGATGCAGCTCTCGGGCCACGTGATGAAATGCTAGGCGGCTGTCAAACCTCCACTCTAACACTTCTCTCTCAGGGTCATCCATTCCATGCAGGCTCACAGGGTGTAACAAGCTGGTGTTCTCTCCTTTATTGGCCTCTTCTACCTTATCTGGCTCAACTGGTACTAGCTTGTAGCACCATCCAAAGGTCAGTGGATATCTGACCCCTGGCCCTGGTGTGTAGTTCTGCCAATCAGGGAAGTAGCCTTGTGTGTGGTAGATCCACAGATCAAGGATATCTTGTCTTCTTTGGGAGTGAATTAGCCCTTCCAGTCCCCCCTTTTCTTTTAAAAAGTGGCTAAGATCTACAGCTGCCTTGTAAGTCATTGGTCTTAAAGGTACCTGAGGTGTGACTGGAAAACCCACCTCTTCCTCCTCTTGTGCTTCTAGCCAGGCACAAGCAGCATTGTTAGCTGCTGTATTGCTACTTGTGATTGCTCCATGTTTTTCTAGGTCTCGAGATACTGCTCCCACCCCATCTGCTGCTGGCTCAGCTCGTCTCATTCTTTCCCTTACAGCAGGCCATCCAATCACACTACTTTTTGACCACTTGCCACCCATCTTATAGCAAAATCCTTTCCAAGCCCTGTCTTATTCTTCTAGGTATGTGGCGAATAGCTCTATAAGCTGCTTGTAATACTTCTATAACCCTATCTGTCCCCTCAGCTACTGCTATGGCTGTGGCATTGAGCAAGTTAACAGCACTATTCTTTAGTTCCTGACTCCAATACTGTAGGAGATTCCACCAATATTTGAGGGCTTCCCACCCCCTGCGTCCCAGAAGTTCCACAATCCTCGTTACAATCAAGAGTAAGTCTCTCAAGCGGTGGTAGCTGAAGAGGCACAGGCTCCGCAGATCGTCCCAGATAAGTGCTAAGGATCCGTTCACTAATCGAATGGATCTGTCTCTGTCTCTCTCTCCACCTTCTTCTTCTATTCCTTCGGGCCTGTCGGGTCCCCTCGGGATTGGGAGGTGGGT
        #at D1  CAGTCGCCGCCCCTCGCCTC
        if searchIdx = ref.index(unknownBindingSequence)
            actualAcceptorIndex = $refRClength - (searchIdx)
            return actualAcceptorIndex
            else
            return nil
        end
        return nil
    

    elsif spliceType1.class == Integer #it's a cryptic splice where the acceptor site was found.  Cryptic site primer binding is not looked at.
        return nil
    
    elsif spliceType1 == nil #no info on the transcript type
        return nil
    
    elsif ((spliceType1 == "A1") or (spliceType1 == "A2")) or spliceType1 == "Gag Exon" or spliceType1 == "A1D2A2"
        #Doesn't tabulate binding data for unresolved acceptors or for the Gag exon
        return nil
    
    elsif spliceType1 =~ /(\w{15})/ #these are some cryptic acceptors (extracted from the forward read) - not tabulated for splicing or binding
        #GTGAGAAGAAGCGGA is a splice 4 bases past D1 before the next GT:  D1 GTGA| A5a acceptor
        #others are unidentifyable junk.  If they cannot be identified they will be run through this program 50 times trying to find a match across the sequence, so looking for them here will find each on 51 times.
        return nil
    
    else
        return nil
    end
end



#returns an empty array or an array of length 2.
#spliceData[0] is type: SPLICED/UNSPLICED/NEF/4 KB/1.8 KB/cryptic/cryptic-noIndex
#spliceData[1] is the specific transcript type if spliced/UNSPLICED/NEF/idx if cryptic index found/sequence if cryptic index not found
def fl_is_cs(forwardSequence, reverseSequence)
    #this happens after both PIDs have been verified, therefore also part of primers
    primerIdx = forwardSequence.index("TGCTGAAGC") #there are 21 HIV bases in the primer,704-724
    # D1 is after 742, 18 more bases = 39 bases past forwardIdx
    #if it can't find the primerIdx exactly, assign it to 4 if it's closeEnough
    if not primerIdx and closeEnough?(forwardSequence[4, 15], "TGCTGAAGCGCGCAC", 2)
        primerIdx = 4
    end
    spliceData = []
    #looks for preD1 sequence
    if primerIdx and forwardSequence[primerIdx + 32, 11] and forwardSequence[primerIdx + 32, 11].include?("CGACTG") # if preD1 sequence exists in correct location
        forwardIdx = forwardSequence.index("CGACTG",36)
        #Looks for postD1 sequence = unspliced
        if forwardSequence[forwardIdx + 6, 6].eql?("GTGAGT") or closeEnough?(forwardSequence[forwardIdx + 6, 15], "GTGAGTACGCCAAAA" , 2) #post D1 sequence
            spliceData[0] = "UNSPLICED"
            spliceData[1] = "UNSPLICED"
            #Looks for D1-A7 splice
            elsif (forwardSequence[forwardIdx + 6, 8].eql?("ACCCACCT") or closeEnough?(forwardSequence[forwardIdx + 6, 15], "ACCCACCTCCCAATC", 2))
            spliceData[0] = "NEF 1"
            spliceData[1] = "NEF 1"
            #the cannonical acceptors from D1 #A1; A2; A3; A4d; A4c; A4a; A4b; A5a; A5b; Gag Exon; A9162
            #Looks for the D1 -acceptor
            elsif (forwardSequence[forwardIdx + 6, 6].eql?("GGACAG")  or forwardSequence[forwardIdx + 6, 6].eql?("AATCTG") or forwardSequence[forwardIdx + 6, 6].eql?("AATTGG") or forwardSequence[forwardIdx + 6, 6].eql?("TGTTGC") or forwardSequence[forwardIdx + 6, 6].eql?("TTTGTT") or forwardSequence[forwardIdx + 6, 6].eql?("CCTTAG") or forwardSequence[forwardIdx + 6, 6].eql?("GCATCT") or forwardSequence[forwardIdx + 6, 6].eql?("GAAGAA") or forwardSequence[forwardIdx + 6, 5].eql?("AAGCG") or forwardSequence[forwardIdx + 6, 6].eql?("GGAAGA") or forwardSequence[forwardIdx + 6, 6].eql?("AACTAC") or closeEnough?(forwardSequence[forwardIdx + 6, 15], "GGACAGCAGAGATCC", 2) or   closeEnough?(forwardSequence[forwardIdx + 6, 15], "AATCTGCTATAAGAA", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "AATTGGGTGTCGACA", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "TGTTGCTTTCATTGC", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "TTTGTTTCATGACAA", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "CCTTAGGCATCTCCT", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "GCATCTCCTATGGCA", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "GAAGAAGCGGAGACA", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "AAGCGGAGACAGCGA", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "GGAAGATCTGGCCTT", 2) or closeEnough?(forwardSequence[forwardIdx + 6, 15], "AACTACACACCAGGG", 2))
            
            #if it's a D1 to A1 splice : has in elsif @ line 257
            if forwardSequence[(forwardIdx + 6), 5].eql?('GGACA') or closeEnough?(forwardSequence[forwardIdx + 6, 15], "GGACAGCAGAGATCC", 2) #A1
                a1Sequence = forwardSequence[(forwardIdx + 44)..forwardSequence.length()] #sequence starting at D2, with 1 base leeway.
                # look for the pre D2 sequence
                a1idx = a1Sequence[0,14].index("GGAAAG")#finds preD2 sequence
                #puts a1idx #it's 6
                if not a1idx and  closeEnough?(a1Sequence[0,12], 'TCCTCTGGAAAG', 2)
                    a1idx = 6 #give it the most probable number likely to be correct or closeEnough.
                end
                if a1idx #look for the post D2 sequence (Vif)
                    if a1Sequence[(a1idx + 6), 5].eql?('GTGAA') or closeEnough?(a1Sequence[(a1idx + 6), 15], "GTGAAGGGGCAGTAG", 2)  #not spliced at D2
                        spliceData[1] = "A1Vif"
                        #the forward sequence is not long enough to find size data, and the reverse read could not have primed size data and still be sequenced.
                        spliceData[0] = "SPLICED"

                        #splices from D2 to A2
                        elsif a1Sequence[(a1idx + 6), 5].eql?('AATCT') or closeEnough?(a1Sequence[(a1idx + 6), 15], 'AATCTGCTATAAGAA', 2) #From D2 finds A2 D1A1D2A2
                        a2Sequence = a1Sequence[a1idx + 68..a1Sequence.length()] #A2 found, pass on sequence to search for D3
                        #finds preD3, having already found A1D2A2, has an else at line 216
                        a2idx = a2Sequence[0, 14].index("AACAAG") #finds pre D3 sequence
                            #puts a2idx #it's 6
                            #puts a2Sequence[0, 12]
                        if not a2idx and closeEnough?(a2Sequence[0, 12], 'GGACATAACAAG', 2)
                            a2idx = 6
                            #this block not verified with the partial data set
                        end
                        if a2idx
                            #if it finds post D3, then it's A1D2A2Vpx
                            if a2Sequence[(a2idx + 6), 5].eql?('GTAGG')  or closeEnough?(a2Sequence[(a2idx + 6), 15], 'GTAGGATCTCTACAG', 2 )#not spliced at D3
                                spliceData[1] = "A1D2A2Vpx" #not spliced at D3 - a Vpr/Vpx transcript
                                #or spliced from D3 to the following acceptors
                                #the forward reads is not long enough for size info, with a very small chance that the reverse read would have primed downstream of size info
                                if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                                    spliceData[0] = "4 KB"
                                    elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                                    spliceData[0] = "1.8 KB"
                                    else spliceData[0] = "SPLICED"
                                end

                                
                                elsif a2Sequence[(a2idx + 6), 5].eql?('AATTG') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'AATTGGGTGTCGACA', 2)  #A3
                                spliceData[1] = "A1D2A2D3A3"
                                #bases from start of read to D1|A1 to SX1 to SX2 to A3-D4 = (44 + 50 + 74) + 269 = 168 + 269
                                #size data not available from forward read but possible from reverse
                                if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                                    spliceData[0] = "4 KB"
                                    elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                                    spliceData[0] = "1.8 KB"
                                    else spliceData[0] = "SPLICED"
                                end

                                
                                #finding size class info from A3 distance from a2idx to D4|A7 is
                                elsif a2Sequence[(a2idx + 6), 5].eql?('TGTTG') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'TGTTGCTTTCATTGC', 2) #A4d
                                spliceData[1] = "A1D2A2D3A4d"
                                #bases from start to D4|A7 = 168 + 128 = 296
                                #size possible from reverse
                                if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                                    spliceData[0] = "4 KB"
                                    elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                                    spliceData[0] = "1.8 KB"
                                    else spliceData[0] = "SPLICED"
                                end

                                
                                elsif a2Sequence[(a2idx + 6), 5].eql?('TTTGT') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'TTTGTTTCATGACAA', 2) #A4c
                                spliceData[1] = "A1D2A2D3A4c"
                                #bases from start to D4|A7 = 168 + 109 = 277
                                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                                    spliceData[0] = "4 KB"
                                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[269, 15], 'TCAAAGCAACCCACC', 3)
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[269, 15], 'TCAAAGCAGTAAGTA', 3)
                                    spliceData[0] = "4 KB"
                                    else spliceData[0] = "SPLICED"
                                end

                                
                                elsif a2Sequence[(a2idx + 6), 5].eql?('CCTTA') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'CCTTAGGCATCTCCT', 2) #A4a
                                spliceData[1] = "A1D2A2D3A4a"
                                #bases from start to D4|A7 = 168 + 91 = 259
                                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                                    spliceData[0] = "4 KB"
                                    #if ind4 = forwardSequence.index("AAGCAGTAAGT")
                                    #    puts ind4 #not in partial data
                                    #end
                                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                                    spliceData[0] = "1.8 KB"
                                    #if ind18 = forwardSequence.index("AAGCAACCCAC")
                                    #    puts ind18 #it's 254, which is expected (5 before A7 in AAGCA|ACCCAC)
                                    #end
                                    #puts forwardSequence[251, 15] #TCAAAGCA | ACCCACC
                                    elsif closeEnough?(forwardSequence[251, 15], 'TCAAAGCAACCCACC', 3)
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[251, 15], 'TCAAAGCAGTAAGTA', 3)
                                    spliceData[0] = "4 KB"
                                    else spliceData[0] = "SPLICED"
                                end

                                
                                elsif a2Sequence[(a2idx + 6), 5].eql?('GCATC') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'GCATCTCCTATGGCA', 2) #A4b
                                spliceData[1] = "A1D2A2D3A4b"
                                #bases from start to D4|A7 = 168 + 85 = 253
                                #puts forwardSequence[245, 15]
                                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                                    spliceData[0] = "4 KB"
                                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[245, 15], 'TCAAAGCAACCCACC', 3)
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[245, 15], 'TCAAAGCAGTAAGTA', 3)
                                    spliceData[0] = "4 KB"
                                    else spliceData[0] = "SPLICED"
                                end

                                
                                elsif a2Sequence[(a2idx + 6), 5].eql?('GAAGA') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'GAAGAAGCGGAGACA', 2) #A5
                                spliceData[1] = "A1D2A2D3A5a"
                                #bases from start to D4|A7 = 168 + 69 = 237
                                #puts forwardSequence[229, 15]
                                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                                    spliceData[0] = "4 KB"
                                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[229, 15], 'TCAAAGCAACCCACC', 3)
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[229, 15], 'TCAAAGCAGTAAGTA', 3)
                                    spliceData[0] = "4 KB"
                                    #puts 'closeEnough'
                                    else spliceData[0] = "SPLICED"
                                end

                                
                                elsif a2Sequence[(a2idx + 6), 5].eql?('AAGCG') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'AAGCGGAGACAGCGA', 2) #A5b
                                spliceData[1] = "A1D2A2D3A5b"
                                #bases from start to D4|A7 = 168 + 65 = 233
                                #puts forwardSequence[225, 15]
                                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                                    spliceData[0] = "4 KB"
                                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[225, 15], 'TCAAAGCAACCCACC', 3)
                                    spliceData[0] = "1.8 KB"
                                    elsif closeEnough?(forwardSequence[225, 15], 'TCAAAGCAGTAAGTA', 3)
                                    spliceData[0] = "4 KB"
                                    else spliceData[0] = "SPLICED"
                                end

                                
                                else #no known aceptors is found
                                #these reads found A1D2A2preD3, but just below are the ones that didn't find preD3
                                #forward read - can't use closeEnough? to find size class since the distance is not known
                                spliceData[1] = "A1D2A2"
                                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                                    spliceData[0] = "4 KB"
                                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                                    spliceData[0] = "1.8 KB"
                                    else spliceData[0] = "SPLICED"
                                end

                            end
                            #has spliced from A1D2A2
                            #doesn't find pre D3, the ones that did are a few lines up
                            #forward read - can't use closeEnough? to find size class since the distance is not known
                            else #from the if @ line 177
                            spliceData[1] = "A1D2A2"
                            if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                                spliceData[0] = "4 KB"
                                elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                                spliceData[0] = "1.8 KB"
                                else spliceData[0] = "SPLICED"
                            end

                            
                        end
                        
                        elsif a1Sequence[(a1idx + 6), 5].eql?('AATTG') or closeEnough?(a1Sequence[(a1idx + 6), 15], 'AATTGGGTGTCGACA', 2)   #A3
                        spliceData[1] = "A1D2A3"
                        #Bases from start of read = 94 + 269 = 363
                        #size data not available from forward read but possible from reverse
                        if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                            spliceData[0] = "4 KB"
                            elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                            spliceData[0] = "1.8 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a1Sequence[(a1idx + 6), 5].eql?('TGTTG') or closeEnough?(a1Sequence[(a1idx + 6), 15], 'TGTTGCTTTCATTGC', 2) #A4d
                        spliceData[1] = "A1D2A4d"
                        #puts forwardSequence.index('TCAAAGCAACCCACC')# expected to be 214
                        #Bases from start of read to D4|A7 = 94 +  128 = 222
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[214, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[214, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a1Sequence[(a1idx + 6), 5].eql?('TTTGT') or closeEnough?(a1Sequence[(a1idx + 6), 15], 'TTTGTTTCATGACAA', 2) #A4c
                        spliceData[1] = "A1D2A4c"
                        #puts forwardSequence.index('TCAAAGCAACCCACC')# expected to be 195
                        #bases from start of read = 94 + 109 = 203
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[195, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[195, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a1Sequence[(a1idx + 6), 5].eql?('CCTTA') or closeEnough?(a1Sequence[(a1idx + 6), 15], 'CCTTAGGCATCTCCT', 2) #A4a
                        spliceData[1] = "A1D2A4a"
                        #bases from start of read = 94 + 91 = 185
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 177
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[177, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[177, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a1Sequence[(a1idx + 6), 5].eql?('GCATC') or closeEnough?(a1Sequence[(a1idx + 6), 15], 'GCATCTCCTATGGCA', 2) #A4b
                        spliceData[1] = "A1D2A4b"
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 171
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[171, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[171, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        
                        elsif a1Sequence[(a1idx + 6), 5].eql?('GAAGA') or closeEnough?(a1Sequence[(a1idx + 6), 15], 'GAAGAAGCGGAGACA', 2) #A5
                        spliceData[1] = "A1D2A5a"
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 155
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[155, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[155, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a1Sequence[(a1idx + 6), 5].eql?('AAGCG') or closeEnough?(a1Sequence[(a1idx + 6), 15], 'AAGCGGAGACAGCGA', 2) #A5b
                        spliceData[1] = "A1D2A5b"
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 151
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[151, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[151, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                    end
            
                    else spliceData[1] = "A1"
                        spliceData[0] = "SPLICED"
                        #not long enough to get size info from either forward or reverse reads
                end
                
                #spliced, but not to A1
                #Now look for direct to A2
                elsif (forwardSequence[forwardIdx + 6, 6].eql?("AATCTG") or closeEnough?(forwardSequence[forwardIdx + 6, 15], "AATCTGCTATAAGAA", 2))  #A2  #finds A2 from D1
                a2Sequence = forwardSequence[(forwardIdx + 68)..forwardSequence.length()]
                #Find pre D3 sequence
                a2idx = a2Sequence[0, 14].index("AACAAG") #finds pre D3 sequence
                #puts a2idx #it's 6
                #puts a2Sequence[0, 12]
                if not a2idx and closeEnough?(a2Sequence[0, 12], 'GGACATAACAAG', 2)
                    a2idx = 6
                    #puts a2Sequence[0, 12]
                end
                if a2idx
                    #No splicing from D3: Vpx
                    if a2Sequence[(a2idx + 6), 5].eql?('GTAGG')  or closeEnough?(a2Sequence[(a2idx + 6), 15], 'GTAGGATCTCTACAG', 2 )#not spliced at D3
                        spliceData[1] = "A2Vpx"
                        #bases from start to D4|A7 = 44 + 655
                        #splice info not in forward reads, maybe rarely in reverse reads
                        if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                            spliceData[0] = "4 KB"
                            elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                            spliceData[0] = "1.8 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        #following is for spliced at D3
                        #identify the acceptors from D3
                        elsif a2Sequence[(a2idx + 6), 5].eql?('AATTG') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'AATTGGGTGTCGACA', 2)   #A3
                        spliceData[1] = "A2D3A3"
                        #bases from start to D4|A7 = 118 + 269
                        #start to D1 + SX2 = 44 + 74 = 118
                        #splice info not in forward reads, can frequently be in reverse reads
                        if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                            spliceData[0] = "4 KB"
                            elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                            spliceData[0] = "1.8 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a2Sequence[(a2idx + 6), 5].eql?('TGTTG') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'TGTTGCTTTCATTGC', 2) #A4d
                        spliceData[1] = "A2D3A4d"
                        #bases from start to D4|A7 = 118 + 128 = 246
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #expected 238
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[238, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[238, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a2Sequence[(a2idx + 6), 5].eql?('TTTGT') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'TTTGTTTCATGACAA', 2) #A4c
                        spliceData[1] = "A2D3A4c"
                        #bases from start = 118 + 109 = 227
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #expected 219
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[219, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[219, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a2Sequence[(a2idx + 6), 5].eql?('CCTTA') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'CCTTAGGCATCTCCT', 2) #A4a
                        spliceData[1] = "A2D3A4a"
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 201
                        #bases from start = 118 + 91 = 209
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[201, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[201, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a2Sequence[(a2idx + 6), 5].eql?('GCATC') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'GCATCTCCTATGGCA', 2) #A4b
                        spliceData[1] = "A2D3A4b"
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 195
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[195, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[195, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a2Sequence[(a2idx + 6), 5].eql?('GAAGA') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'GAAGAAGCGGAGACA', 2) #A5
                        spliceData[1] = "A2D3A5a"
                        #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 179
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[179, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[179, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        elsif a2Sequence[(a2idx + 6), 5].eql?('AAGCG') or closeEnough?(a2Sequence[(a2idx + 6), 15], 'AAGCGGAGACAGCGA', 2) #A5b
                        spliceData[1] = "A2D3A5b"
                        #puts forwardSequence.index('TCAAAGCAACCCACC') # it's 175
                        if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                            spliceData[0] = "4 KB"
                            elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[175, 15], 'TCAAAGCAACCCACC', 3)
                            spliceData[0] = "1.8 KB"
                            elsif closeEnough?(forwardSequence[175, 15], 'TCAAAGCAGTAAGTA', 3)
                            spliceData[0] = "4 KB"
                            else spliceData[0] = "SPLICED"
                        end

                        
                        else #doesn't find a cannonical acceptor from D3
                        spliceData[1] = "A2"
                        #too long to find size data in forward read, may rarely be found in reverse read
                        if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                            spliceData[0] = "4 KB"
                            elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                            spliceData[0] = "1.8 KB"
                            else spliceData[0] = "SPLICED"
                        end

                    end
                    
                    else #pre D3 sequence not found
                    spliceData[1] = "A2"
                    #too long to find size data in forward read, may rarely be found in reverse read
                    if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                        spliceData[0] = "4 KB"
                        elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                        spliceData[0] = "1.8 KB"
                        else spliceData[0] = "SPLICED"
                    end

                end
                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('AATTG') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'AATTGGGTGTCGACA', 2)   #A3
                spliceData[1] = "A3"
                #bases from start to D4|A7 = 44 + 269
                #size info not in forward reads but will frequently be in reverse reads
                if reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT")
                    spliceData[0] = "4 KB"
                    elsif reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT")
                    spliceData[0]
                    else spliceData[0] = "SPLICED"
                end

                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('TGTTG') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'TGTTGCTTTCATTGC', 2) #A4d
                spliceData[1] = "A4d"
                #bases from start to D4|A7 = 44 + 128 = 172
                #puts forwardSequence.index('TCAAAGCAACCCACC') #expected 164
                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                    spliceData[0] = "4 KB"
                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[164, 15], 'TCAAAGCAACCCACC', 3)
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[164, 15], 'TCAAAGCAGTAAGTA', 3)
                    spliceData[0] = "4 KB"
                    else spliceData[0] = "SPLICED"
                end

                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('TTTGT') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'TTTGTTTCATGACAA', 2) #A4c
                spliceData[1] = "A4c"
                #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 145
                #bases from start to D4|A7 = 44 + 109 = 153
                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                    spliceData[0] = "4 KB"
                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[145, 15], 'TCAAAGCAACCCACC', 3)
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[145, 15], 'TCAAAGCAGTAAGTA', 3)
                    spliceData[0] = "4 KB"
                    else spliceData[0] = "SPLICED"
                end

                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('CCTTA') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'CCTTAGGCATCTCCT', 2) #A4a
                spliceData[1] = "A4a"
                #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 127
                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                    spliceData[0] = "4 KB"
                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[127, 15], 'TCAAAGCAACCCACC', 3)
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[127, 15], 'TCAAAGCAGTAAGTA', 3)
                    spliceData[0] = "4 KB"
                    else spliceData[0] = "SPLICED"
                end

                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('GCATC') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'GCATCTCCTATGGCA', 2) #A4b
                spliceData[1] = "A4b"
                #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 121
                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                    spliceData[0] = "4 KB"
                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[121, 15], 'TCAAAGCAACCCACC', 3)
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[121, 15], 'TCAAAGCAGTAAGTA', 3)
                    spliceData[0] = "4 KB"
                    else spliceData[0] = "SPLICED"
                end

                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('GAAGA') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'GAAGAAGCGGAGACA', 2) #A5
                spliceData[1] = "A5a"
                #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 105
                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                    spliceData[0] = "4 KB"
                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[105, 15], 'TCAAAGCAACCCACC', 3)
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[105, 15], 'TCAAAGCAGTAAGTA', 3)
                    spliceData[0] = "4 KB"
                    else spliceData[0] = "SPLICED"
                end

                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('AAGCG') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'AAGCGGAGACAGCGA', 2) #A5b
                spliceData[1] = "A5b"
                #puts forwardSequence.index('TCAAAGCAACCCACC') #it's 101
                if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
                    spliceData[0] = "4 KB"
                    elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[101, 15], 'TCAAAGCAACCCACC', 3)
                    spliceData[0] = "1.8 KB"
                    elsif closeEnough?(forwardSequence[101, 15], 'TCAAAGCAGTAAGTA', 3)
                    spliceData[0] = "4 KB"
                    else spliceData[0] = "SPLICED"
                end

                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('GGAAG') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'GGAAGATCTGGCCTT', 2) #Gag Exon
                spliceData[1] = "Gag Exon"
                spliceData[0] = "SPLICED"

                
                elsif forwardSequence[(forwardIdx + 6), 5].eql?('AACTA') or closeEnough?(forwardSequence[(forwardIdx + 6), 15], 'AACTACACACCAGGG', 2) #A9162
                spliceData[1] = "A9162"
                spliceData[0] = "SPLICED"
                
            end  #ends the if @170
#            if (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAGTAAGT") or reverseSequence[15, reverseSequence.length()].include?("ACTTACTGCTT"))
#                spliceData[0] = "4 KB"
#                elsif (forwardSequence[forwardIdx + 60, forwardSequence.length()].include?("AAGCAACCCAC") or reverseSequence[15, reverseSequence.length()].include?("GTGGGTTGCTT"))
#                spliceData[0] = "1.8 KB"
#                else spliceData[0] = "SPLICED"
#            end
            else  #if on line 156  #it's not unsplice, nef, or a cannonical acceptor
            unknownAcceptor = forwardSequence[forwardIdx + 6, 10]
            idx = identifyAcceptorAnywhere(unknownAcceptor, $ref) # this returns the index of a cryptic splice or nil if it fails to match reference
            if idx
                spliceData[0] = "cryptic"
                spliceData[1] = idx
                else
                spliceData[0] = "cryptic-noIndex"
                spliceData[1] = forwardSequence[forwardIdx + 6, 15]
            end
        end
    end
    #returns an empty array or an array of length 2.
    #spliceData[0] is type: SPLICED/UNSPLICED/NEF/4 KB/1.8 KB/cryptic/cryptic-noIndex
    #spliceData[1] is the specific transcript type if spliced/UNSPLICED/NEF/idx if cryptic index found/sequence if cryptic index not found
    return spliceData
end




line_count = 1
unspliced = 0
fourkb = 0
onepoint8kb = 0
nef1 = 0
spliced = 0  #= onepoint8kb + fourkb + nef1;DOES NOT INCLUDE splicedNoSizeInfo BUT NOT gag exon, A9162, cryptics
splicedNoSizeInfo = 0
spliceDataHash = {} #PID to splice info
pIDCountHash = Hash.new(0)
primerDimer = 0
reverseBadQualityCount = 0
crypticIdxHash = Hash.new(0)
crypticSequenceHash = Hash.new(0)
rpBindHash = Hash.new(0)  #hashes the index where it binds (forward index) to the counts at that index
rpNoBindHash = Hash.new(0) # binding sequences not found in the reference genome to counts
rpBindUnspliced = Hash.new(0) #binding index to counts
rpBindA1 = Hash.new(0) #binding index to counts
rpBindA2 = Hash.new(0)
rpBindA3 = Hash.new(0)
rpBindA4 = Hash.new(0)
rpBindA5 = Hash.new(0)
alreadyCounted = {} #hashes the PID to true once its binding index has been counted
boundPIDcount = 0.0 #number of PIDs where the binding site was identified
correctlyPrimed = 0.0
incorrectlyPrimed = 0.0




a1_18kb = 0.0
a2_18kb = 0.0
a3_18kb = 0.0
a4d_18kb = 0.0
a4c_18kb = 0.0
a4a_18kb = 0.0
a4b_18kb = 0.0
a5a_18kb = 0.0
a5b_18kb = 0.0
a1vif_18kb = 0.0
a1d2a2vpx_18kb = 0.0
a1d2a3_18kb = 0.0
a1d2a4d_18kb = 0.0
a1d2a4c_18kb = 0.0
a1d2a4a_18kb = 0.0
a1d2a4b_18kb = 0.0
a1d2a5a_18kb = 0.0
a1d2a5b_18kb = 0.0
a1d2a2_18kb = 0.0
a2vpx_18kb = 0.0
a2d3a3_18kb = 0.0
a2d3a4d_18kb = 0.0
a2d3a4c_18kb = 0.0
a2d3a4a_18kb = 0.0
a2d3a4b_18kb = 0.0
a2d3a5a_18kb = 0.0
a2d3a5b_18kb = 0.0
a1d2a2d3a3_18kb = 0.0
a1d2a2d3a4d_18kb = 0.0
a1d2a2d3a4c_18kb = 0.0
a1d2a2d3a4a_18kb = 0.0
a1d2a2d3a4b_18kb = 0.0
a1d2a2d3a5a_18kb = 0.0
a1d2a2d3a5b_18kb = 0.0
gagexon_18kb = 0.0


a1_4kb = 0.0
a2_4kb = 0.0
a3_4kb = 0.0
a4d_4kb = 0.0
a4c_4kb = 0.0
a4a_4kb = 0.0
a4b_4kb = 0.0
a5a_4kb = 0.0
a5b_4kb = 0.0
a1vif_4kb = 0.0
a1d2a2vpx_4kb = 0.0
a1d2a3_4kb = 0.0
a1d2a4d_4kb = 0.0
a1d2a4c_4kb = 0.0
a1d2a4a_4kb = 0.0
a1d2a4b_4kb = 0.0
a1d2a5a_4kb = 0.0
a1d2a5b_4kb = 0.0
a1d2a2_4kb = 0.0
a2vpx_4kb = 0.0
a2d3a3_4kb = 0.0
a2d3a4d_4kb = 0.0
a2d3a4c_4kb = 0.0
a2d3a4a_4kb = 0.0
a2d3a4b_4kb = 0.0
a2d3a5a_4kb = 0.0
a2d3a5b_4kb = 0.0
a1d2a2d3a3_4kb = 0.0
a1d2a2d3a4d_4kb = 0.0
a1d2a2d3a4c_4kb = 0.0
a1d2a2d3a4a_4kb = 0.0
a1d2a2d3a4b_4kb = 0.0
a1d2a2d3a5a_4kb = 0.0
a1d2a2d3a5b_4kb = 0.0
gagexon_4kb = 0.0


a1_nsi = 0.0
a2_nsi = 0.0
a3_nsi = 0.0
a4d_nsi = 0.0
a4c_nsi = 0.0
a4a_nsi = 0.0
a4b_nsi = 0.0
a5a_nsi = 0.0
a5b_nsi = 0.0
a1vif_nsi = 0.0
a1d2a2vpx_nsi = 0.0
a1d2a3_nsi = 0.0
a1d2a4d_nsi = 0.0
a1d2a4c_nsi = 0.0
a1d2a4a_nsi = 0.0
a1d2a4b_nsi = 0.0
a1d2a5a_nsi = 0.0
a1d2a5b_nsi = 0.0
a1d2a2_nsi = 0.0
a2vpx_nsi = 0.0
a2d3a3_nsi = 0.0
a2d3a4d_nsi = 0.0
a2d3a4c_nsi = 0.0
a2d3a4a_nsi = 0.0
a2d3a4b_nsi = 0.0
a2d3a5a_nsi = 0.0
a2d3a5b_nsi = 0.0
a1d2a2d3a3_nsi = 0.0
a1d2a2d3a4d_nsi = 0.0
a1d2a2d3a4c_nsi = 0.0
a1d2a2d3a4a_nsi = 0.0
a1d2a2d3a4b_nsi = 0.0
a1d2a2d3a5a_nsi = 0.0
a1d2a2d3a5b_nsi = 0.0
gagexon_nsi = 0.0

a9162 = 0.0
bind_8564_splice8366_6701 = 0.0


forwardFile, reverseFile = ARGV
forward = File.open(forwardFile, 'r')
reverse = File.open(reverseFile, 'r')


while (line = forward.gets and line.strip != nil) && (rline = reverse.gets and rline.strip != nil) do
    if line_count % 4 == 1  #make sure forward and reverse sequences match
        pID = nil
        nameF = line.split[0]
        nameR = rline.split[0]
        if !nameF.eql?(nameR)
            puts "File lines not correlated!!"
            break
        end
    end
    if line_count % 4 == 2  #save sequence until PID quality scores are checked
        forwardSequence = line
        reverseSequence = rline
    end
    
    if line_count % 4 == 0
        keepGoing = true
        forwardPrime = findForwardPrimerRemoveDimers(forwardSequence)
        if forwardPrime == 'primerDimer' #verifies forward primer sequence exists and is not a primer dimer
            keepGoing = false
            primerDimer += 1
            elsif forwardPrime == 'forwardIncorrectPrime'
                keepGoing = false
                incorrectlyPrimed += 1
            elsif forwardPrime == 'forwardCorrectPrime'
                correctlyPrimed += 1
        end
        rline[0,14].each_codepoint do |q|
            if q <= 53   # >=53 to ASCII 5, which is a 1% chance of miscall, or >= #56, ASCII 8, .5% miscall
                keepGoing = false
                reverseBadQualityCount += 1
                break
            end
        end
        if keepGoing == true #pID passes inspection & forward priming is correct
            # for 14 bases, .932 probability correct >= 56
            # for .001, >=63 or ASCII ?, .986 probability correct
            pID = reverseSequence[0,14]
            pIDCountHash[pID] += 1
            spliceType = fl_is_cs(forwardSequence, reverseSequence)
            #spliceType is an array of length 2: [transcript class, transcript specifics]
            if (spliceType != nil && spliceType != []) #if spliceType is valid
                #spliceDataHash[pID] = spliceType unless spliceDataHash[pID] #hash it by PID unless there is already something for this PID
                if spliceDataHash[pID] #if there's already something under this PID, upgrade if more complete data is available
                    if spliceDataHash[pID][0] == "SPLICED" and (spliceType[0] == "4 KB" or spliceType[0] == "1.8 KB")
                        spliceDataHash.delete(pID)
                        spliceDataHash[pID] = spliceType #replace spliced with no size info size class data
                        elsif spliceDataHash[pID][0] == "cryptic" or spliceDataHash[pID][0] == "cryptic-noIndex" #if it's cryptic try some other data - it can only improve
                        spliceDataHash.delete(pID)
                        spliceDataHash[pID] = spliceType
                    end #otherwise do nothing
                else #nothing is hashed under this pID yet
                spliceDataHash[pID] = spliceType #if there is nothing under this PID, hash the spliceType
                end
            end #end of processing for all non null, non empty spliceTypes
            
            #find the binding site of this PID, and if this PID is mapped to unspliced or a cannonical acceptor then hash it to a specific hash.
            unless alreadyCounted[pID]  #somthing hasn't already been hashed under this PID (it's the first time through this block for this PID)
                #find where the cDNA random reverse primer primes
                #puts line_count #misses a few - so probably catching duplicat pIDs
                start = 14
                bases = 20
                iter = 0
                while iter <= 50 #give it 50 bases past the binding site to find a clearly identifiable HIV sequence
                    realIdx = nil
                    bindIdx = nil
                    bindSeq = nil
                    bindSeq = reverseSequence[(start + iter), bases] #sliding window of 20 (#1013) bases is matched to HIV genome
                    bindIdx = identifyReverseBindingSiteSpliced(bindSeq, spliceType[0], spliceType[1]) #finds binding index or returns nil
                    if bindIdx
                        realIdx = bindIdx + iter
                        boundPIDcount += 1
                        rpBindHash[realIdx] += 1
                        alreadyCounted[pID] = true
                        iter += 51 #ends the iteration
                        #remove reads primed by l_4kb_rp
                        if (realIdx == 6076 and (reverseSequence[14,4] == "GTAC"))#it's a misprime from the contaminating size class primer
                            #take it out of the spliceDataHash[pID]
                            spliceDataHash.delete(pID)
                            pIDCountHash[pID] -= 1
                            alreadyCounted.delete(pID)
                        end
                        #spliceDataHash[PID] is an array of length 2: [type, specific]
                        if spliceDataHash[pID] #if there is a splice type associated with this PID, and it's a cononical acceptor, then put it into it's own hash
                            if spliceDataHash[pID][0] == "UNSPLICED" #link unspliced transcripts to binding data
                                rpBindUnspliced[realIdx] += 1
                                elsif spliceDataHash[pID][0] == "SPLICED" or spliceDataHash[pID][0] == "4 KB" or spliceDataHash[pID][0] == "1.8 KB" #link spliced transcripts to binding data
                                acceptorString = spliceDataHash[pID][1]
                                shortString = acceptorString[0,2] unless acceptorString.class == Integer
                                if shortString == "A5"
                                    rpBindA5[realIdx] += 1
                                    elsif shortString == "A1"
                                    rpBindA1[realIdx] += 1
                                    elsif shortString == "A2"
                                    rpBindA2[realIdx] += 1
                                    elsif shortString == "A4"
                                    rpBindA4[realIdx] += 1
                                    elsif shortString == "A3"
                                    rpBindA3[realIdx] += 1
                                end
                            end
                        end
                    else
                    iter += 1
                    end #this ends the if bindIdx
                end #this ends the while iter <=50 loop
                if bindIdx == nil #which it is, if it got to this line
#                    #collect info on this event that may be specific to Xiao's data set
#                    if (reverseSequence[start, bases] == "CCACCCCCTGCGTCCCAGAA") or (closeEnough?(reverseSequence[start, bases], "CCACCCCCTGCGTCCCAGAA", 3))
#                        bind_8564_splice8366_6701 += 1
#                        puts forwardSequence
#                        puts
#                        puts reverseSequence
#                        puts
#                        puts
#                        puts
#
#                    end
                    rpNoBindHash[reverseSequence[start, bases]] += 1 #these are all very similar sequences - check this out
                end
            end
        end
    end
    line_count += 1
end

#print spliceDataHash #{}


spliceDataHash.each do |longPID, spliceType|
    if spliceType[0] == "UNSPLICED"
        unspliced += 1
        
    #all 4 KB transcripts
        elsif spliceType[0] == "4 KB"
        fourkb += 1
        spliced += 1
        #All direct
        if spliceType[1] == "A1"
            a1_4kb += 1
            elsif spliceType[1] == "A1Vif"
            a1vif_4kb += 1
            elsif spliceType[1] == "A2"
            a2_4kb += 1
            elsif spliceType[1] == "A2Vpx"
            a2vpx_4kb += 1
            elsif spliceType[1] == "A3"
            a3_4kb += 1
            elsif spliceType[1] == "A4d"
            a4d_4kb += 1
            elsif spliceType[1] == "A4c"
            a4c_4kb += 1
            elsif spliceType[1] == "A4a"
            a4a_4kb += 1
            elsif spliceType[1] == "A4b"
            a4b_4kb += 1
            elsif spliceType[1] == "A5a"
            a5a_4kb += 1
            elsif spliceType[1] == "A5b"
            a5b_4kb += 1
        #All small exon 1
            elsif spliceType[1] == "A1D2A2Vpx"
            a1d2a2vpx_4kb += 1
            elsif spliceType[1] == "A1D2A3"
            a1d2a3_4kb += 1
            elsif spliceType[1] == "A1D2A4d"
            a1d2a4d_4kb += 1
            elsif spliceType[1] == "A1D2A4c"
            a1d2a4c_4kb += 1
            elsif spliceType[1] == "A1D2A4a"
            a1d2a4a_4kb += 1
            elsif spliceType[1] == "A1D2A4b"
            a1d2a4b_4kb += 1
            elsif spliceType[1] == "A1D2A5a"
            a1d2a5a_4kb += 1
            elsif spliceType[1] == "A1D2A5b"
            a1d2a5b_4kb += 1
        #All small exon 2
            elsif spliceType[1] == "A2D3A3"
            a2d3a3_4kb += 1
            elsif spliceType[1] == "A2D3A4d"
            a2d3a4d_4kb += 1
            elsif spliceType[1] == "A2D3A4c"
            a2d3a4c_4kb += 1
            elsif spliceType[1] == "A2D3A4a"
            a2d3a4a_4kb += 1
            elsif spliceType[1] == "A2D3A4b"
            a2d3a4b_4kb += 1
            elsif spliceType[1] == "A2D3A5a"
            a2d3a5a_4kb += 1
            elsif spliceType[1] == "A2D3A5b"
            a2d3a5b_4kb += 1
        #All both small exons
            elsif spliceType[1] == "A1D2A2"
            a1d2a2_4kb += 1
            elsif spliceType[1] == "A1D2A2D3A3"
            a1d2a2d3a3_4kb+= 1
            elsif spliceType[1] == "A1D2A2D3A4d"
            a1d2a2d3a4d_4kb += 1
            elsif spliceType[1] == "A1D2A2D3A4c"
            a1d2a2d3a4c_4kb += 1
            elsif spliceType[1] == "A1D2A2D3A4a"
            a1d2a2d3a4a_4kb += 1
            elsif spliceType[1] == "A1D2A2D3A4b"
            a1d2a2d3a4b_4kb += 1
            elsif spliceType[1] == "A1D2A2D3A5a"
            a1d2a2d3a5a_4kb += 1
            elsif spliceType[1] == "A1D2A2D3A5b"
            a1d2a2d3a5b_4kb += 1
        #Gag Exon
            elsif spliceType[1] == "Gag Exon"
            gagexon_4kb += 1
            spliced -= 1 #because gagexon is not counted in total spliced
        end

    ##all 1.8 KB transcripts
        elsif spliceType[0] == "1.8 KB"
            onepoint8kb += 1
            spliced += 1
            if spliceType[1] == "A1"
                a1_18kb += 1
                elsif spliceType[1] == "A1Vif"
                a1vif_18kb += 1
                elsif spliceType[1] == "A2"
                a2_18kb += 1
                elsif spliceType[1] == "A2Vpx"
                a2vpx_18kb += 1
                elsif spliceType[1] == "A3"
                a3_18kb += 1
                elsif spliceType[1] == "A4d"
                a4d_18kb += 1
                elsif spliceType[1] == "A4c"
                a4c_18kb += 1
                elsif spliceType[1] == "A4a"
                a4a_18kb += 1
                elsif spliceType[1] == "A4b"
                a4b_18kb += 1
                elsif spliceType[1] == "A5a"
                a5a_18kb += 1
                elsif spliceType[1] == "A5b"
                a5b_18kb += 1
                
        #All small exon 1
                elsif spliceType[1] == "A1D2A2Vpx"
                a1d2a2vpx_18kb += 1
                elsif spliceType[1] == "A1D2A3"
                a1d2a3_18kb += 1
                elsif spliceType[1] == "A1D2A4d"
                a1d2a4d_18kb += 1
                elsif spliceType[1] == "A1D2A4c"
                a1d2a4c_18kb += 1
                elsif spliceType[1] == "A1D2A4a"
                a1d2a4a_18kb += 1
                elsif spliceType[1] == "A1D2A4b"
                a1d2a4b_18kb += 1
                elsif spliceType[1] == "A1D2A5a"
                a1d2a5a_18kb += 1
                elsif spliceType[1] == "A1D2A5b"
                a1d2a5b_18kb += 1
        #All small exon 2
                elsif spliceType[1] == "A2D3A3"
                a2d3a3_18kb += 1
                elsif spliceType[1] == "A2D3A4d"
                a2d3a4d_18kb += 1
                elsif spliceType[1] == "A2D3A4c"
                a2d3a4c_18kb += 1
                elsif spliceType[1] == "A2D3A4a"
                a2d3a4a_18kb += 1
                elsif spliceType[1] == "A2D3A4b"
                a2d3a4b_18kb += 1
                elsif spliceType[1] == "A2D3A5a"
                a2d3a5a_18kb += 1
                elsif spliceType[1] == "A2D3A5b"
                a2d3a5b_18kb += 1
        #All both small exons
                elsif spliceType[1] == "A1D2A2"
                a1d2a2_18kb += 1
                elsif spliceType[1] == "A1D2A2D3A3"
                a1d2a2d3a3_18kb+= 1
                elsif spliceType[1] == "A1D2A2D3A4d"
                a1d2a2d3a4d_18kb += 1
                elsif spliceType[1] == "A1D2A2D3A4c"
                a1d2a2d3a4c_18kb += 1
                elsif spliceType[1] == "A1D2A2D3A4a"
                a1d2a2d3a4a_18kb += 1
                elsif spliceType[1] == "A1D2A2D3A4b"
                a1d2a2d3a4b_18kb += 1
                elsif spliceType[1] == "A1D2A2D3A5a"
                a1d2a2d3a5a_18kb += 1
                elsif spliceType[1] == "A1D2A2D3A5b"
                a1d2a2d3a5b_18kb += 1
        #Gag Exon
                elsif spliceType[1] == "Gag Exon"
                gagexon_18kb += 1
                spliced -= 1 #because Gag Exon is not counted in total spliced
            end
    
    #all spliced but without size class info
        elsif spliceType[0] == "SPLICED"
        splicedNoSizeInfo += 1  #this is added to 'spliced' later for totalSpliced @1407
            if spliceType[1] == "A1"
                a1_nsi += 1
                elsif spliceType[1] == "A1Vif"
                a1vif_nsi += 1
                elsif spliceType[1] == "A2"
                a2_nsi += 1
                elsif spliceType[1] == "A2Vpx"
                a2vpx_nsi += 1
                elsif spliceType[1] == "A3"
                a3_nsi += 1
                elsif spliceType[1] == "A4d"
                a4d_nsi += 1
                elsif spliceType[1] == "A4c"
                a4c_nsi += 1
                elsif spliceType[1] == "A4a"
                a4a_nsi += 1
                elsif spliceType[1] == "A4b"
                a4b_nsi += 1
                elsif spliceType[1] == "A5a"
                a5a_nsi += 1
                elsif spliceType[1] == "A5b"
                a5b_nsi += 1
            #All small exon 1
                elsif spliceType[1] == "A1D2A2Vpx"
                a1d2a2vpx_nsi += 1
                elsif spliceType[1] == "A1D2A3"
                a1d2a3_nsi += 1
                elsif spliceType[1] == "A1D2A4d"
                a1d2a4d_nsi += 1
                elsif spliceType[1] == "A1D2A4c"
                a1d2a4c_nsi += 1
                elsif spliceType[1] == "A1D2A4a"
                a1d2a4a_nsi += 1
                elsif spliceType[1] == "A1D2A4b"
                a1d2a4b_nsi += 1
                elsif spliceType[1] == "A1D2A5a"
                a1d2a5a_nsi += 1
                elsif spliceType[1] == "A1D2A5b"
                a1d2a5b_nsi += 1
            #All small exon 2
                elsif spliceType[1] == "A2D3A3"
                a2d3a3_nsi += 1
                elsif spliceType[1] == "A2D3A4d"
                a2d3a4d_nsi += 1
                elsif spliceType[1] == "A2D3A4c"
                a2d3a4c_nsi += 1
                elsif spliceType[1] == "A2D3A4a"
                a2d3a4a_nsi += 1
                elsif spliceType[1] == "A2D3A4b"
                a2d3a4b_nsi += 1
                elsif spliceType[1] == "A2D3A5a"
                a2d3a5a_nsi += 1
                elsif spliceType[1] == "A2D3A5b"
                a2d3a5b_nsi += 1
            #All both small exons
                elsif spliceType[1] == "A1D2A2"
                a1d2a2_nsi += 1
                elsif spliceType[1] == "A1D2A2D3A3"
                a1d2a2d3a3_nsi+= 1
                elsif spliceType[1] == "A1D2A2D3A4d"
                a1d2a2d3a4d_nsi += 1
                elsif spliceType[1] == "A1D2A2D3A4c"
                a1d2a2d3a4c_nsi += 1
                elsif spliceType[1] == "A1D2A2D3A4a"
                a1d2a2d3a4a_nsi += 1
                elsif spliceType[1] == "A1D2A2D3A4b"
                a1d2a2d3a4b_nsi += 1
                elsif spliceType[1] == "A1D2A2D3A5a"
                a1d2a2d3a5a_nsi += 1
                elsif spliceType[1] == "A1D2A2D3A5b"
                a1d2a2d3a5b_nsi += 1
            #Gag Exon
                elsif spliceType[1] == "Gag Exon"
                gagexon_nsi += 1
                splicedNoSizeInfo -= 1 #because gag exon is not counted in total spliced transcripts
            #A9162 (always is no splice info)
                elsif spliceType[1] == "A9162"
                a9162  += 1
                splicedNoSizeInfo -= 1 #because #A9162 is not counted in total spliced transcripts
            end
        
        elsif spliceType[0] == "NEF 1"
        nef1 += 1
        spliced += 1
            
        elsif spliceType[0] == "cryptic"
        crypticIdxHash[spliceType[1]] += 1  #this counts the indexes of cryptic acceptors
        
        elsif spliceType[0] == "cryptic-noIndex"
        crypticSequenceHash[spliceType[1]] += 1 #this counts cryptic acceptors with no index match
    end
end



outputFile = forwardFile + "_output_catagory_sort_NLRef_Cryptics.txt"
writeOut = File.open(outputFile, "w")
sampleName = forwardFile.split(/_[ACTG][ACTG][ACTG][ACTG][ACTG][ACTG][ACTG]/)[0]
writeOut.write("\t\t" + sampleName + "\n")

bindingFile = forwardFile + "_catagory_sort_binding_info.txt"
infoOut = File.open(bindingFile, "w")

crypticFile = forwardFile + "_catagory_sort_PID_cryptic_info.txt"
crypticOut = File.open(crypticFile, "w")


allReads = line_count/4
writeOut.write("spliceDataHash.keys\t#{spliceDataHash.keys.size()}\n")
writeOut.write("linecount/4(AllReads)\t#{allReads}\n")
writeOut.write("CorrectForwardPrimedPercentOfAllReads\t#{correctlyPrimed}\t#{100* correctlyPrimed/allReads}\n")
writeOut.write("IncorrectForwardPrimedPercentOfAllReads\t#{incorrectlyPrimed}\t#{100* incorrectlyPrimed/allReads}\n")
writeOut.write("PrimerDimersPercentOfAllReads\t#{primerDimer}\t#{100* primerDimer/allReads}\n")
writeOut.write("ReverseBadQualityPIDCountPercentOfAllReads\t#{reverseBadQualityCount}\t#{100.0*reverseBadQualityCount/allReads}\n\n\n")

writeOut.write("\n\n")


#Summary Outputs
#Denominators
writeOut.write("Denominators:\n")
writeOut.write("spliced = onepoint8kb + fourkb + nef1 - BUT NOT splicedNoSizeInfo\n")     #from ~line 1251
writeOut.write("totalSpliced = spliced(onepoint8kb + fourkb + nef) + splicedNoSizeInfo\n")
#puts 'spliced', spliced
#puts
#puts 'splicedNoSizeInfo', splicedNoSizeInfo
#puts
#puts 'onepoint8kb', onepoint8kb
#puts
#puts 'fourkb', fourkb
#puts
#puts 'nef1', nef1
#puts
totalSpliced = spliced + splicedNoSizeInfo
#puts 'totalSpliced', totalSpliced
#puts
writeOut.write("allTranscripts = unspliced + totalSpliced\n")
allTranscripts = unspliced + totalSpliced
#puts 'allTranscripts', allTranscripts
#puts
writeOut.write("splicedWithSizeInfo = fourkb + onepoint8kb #doesn't include Nef1\n\n")
splicedWithSizeInfo = fourkb + onepoint8kb #doesn't include Nef1
#puts 'splicedWithSizeInfo', splicedWithSizeInfo
#puts
allSplicedWOnef1 = splicedWithSizeInfo + splicedNoSizeInfo
writeOut.write("totalSplicedPercentOfAllTranscripts\t#{totalSpliced}\t#{100.0*totalSpliced/allTranscripts}\n")
writeOut.write("unsplicedPercentOfAllTranscripts\t#{unspliced}\t#{100.00*unspliced/allTranscripts}\n")
writeOut.write("splicedWithSizeInfoPercentOfAllSplicedWOnef1\t#{splicedWithSizeInfo}\t#{100.0*splicedWithSizeInfo/allSplicedWOnef1}\n")
writeOut.write("4KBpercentOfSplicedWithSizeInfo\t#{fourkb}\t#{100.0*fourkb/splicedWithSizeInfo}\n")
writeOut.write("1.8KBpercentOfSplicedWithSizeInfo\t#{onepoint8kb}\t#{100.0*onepoint8kb/splicedWithSizeInfo}\n")
writeOut.write("Nef1percentOfTotalSpliced\t#{nef1}\t#{100.0*nef1/totalSpliced}\n")
writeOut.write("splicedNoSizeInfoPercentOfTotalSpliced\t#{splicedNoSizeInfo}\t#{100.0*splicedNoSizeInfo/totalSpliced}\n")



#initial acceptors - no size info
a1_nsi_total = a1_nsi + a1vif_nsi + a1d2a2vpx_nsi + a1d2a3_nsi + a1d2a4d_nsi + a1d2a4c_nsi + a1d2a4a_nsi + a1d2a4b_nsi + a1d2a5a_nsi + a1d2a5b_nsi + a1d2a2_nsi + a1d2a2d3a3_nsi + a1d2a2d3a4d_nsi + a1d2a2d3a4c_nsi + a1d2a2d3a4a_nsi + a1d2a2d3a4b_nsi + a1d2a2d3a5a_nsi + a1d2a2d3a5b_nsi
a2_nsi_total = a2_nsi + a2vpx_nsi + a2d3a3_nsi + a2d3a4d_nsi + a2d3a4c_nsi + a2d3a4a_nsi + a2d3a4b_nsi + a2d3a5a_nsi + a2d3a5b_nsi
a3_nsi_total = a3_nsi
a4_nsi_total = a4d_nsi + a4c_nsi + a4b_nsi + a4a_nsi
a5_nsi_total = a5a_nsi + a5b_nsi
totalNoSizeInfo = a1_nsi_total + a2_nsi_total + a3_nsi_total + a4_nsi_total + a5_nsi_total
#puts 'totalNoSizeInfo', totalNoSizeInfo
#puts

#final acceptors - no size info
a1_nsi_final = a1vif_nsi
a2_nsi_final = a1d2a2vpx_nsi + a2vpx_nsi
a3_nsi_final = a3_nsi + a1d2a3_nsi + a2d3a3_nsi + a1d2a2d3a3_nsi
a4d_nsi_final = a4d_nsi + a1d2a4d_nsi + a2d3a4d_nsi + a1d2a2d3a4d_nsi
a4c_nsi_final = a4c_nsi + a1d2a4c_nsi + a2d3a4c_nsi + a1d2a2d3a4c_nsi
a4a_nsi_final = a4a_nsi + a1d2a4a_nsi + a2d3a4a_nsi + a1d2a2d3a4a_nsi
a4b_nsi_final = a4b_nsi + a1d2a4b_nsi + a2d3a4b_nsi + a1d2a2d3a4b_nsi
a5a_nsi_final = a5a_nsi + a1d2a5a_nsi + a2d3a5a_nsi + a1d2a2d3a5a_nsi
a5b_nsi_final = a5b_nsi + a1d2a5b_nsi + a2d3a5b_nsi + a1d2a2d3a5b_nsi
a4all_nsi_final = a4d_nsi_final + a4c_nsi_final + a4a_nsi_final + a4b_nsi_final
a5all_nsi_final = a5a_nsi_final + a5b_nsi_final
all_nsi_final = a1_nsi_final + a2_nsi_final + a3_nsi_final + a4all_nsi_final + a5all_nsi_final
#puts 'all_nsi_final', all_nsi_final
#puts

#inital acceptor - 1.8KB
a1_18kb_total = a1_18kb + a1vif_18kb + a1d2a2_18kb + a1d2a2vpx_18kb + a1d2a3_18kb + a1d2a4d_18kb + a1d2a4c_18kb + a1d2a4a_18kb + a1d2a4b_18kb + a1d2a5a_18kb + a1d2a5b_18kb  + a1d2a2d3a3_18kb + a1d2a2d3a4d_18kb + a1d2a2d3a4c_18kb + a1d2a2d3a4a_18kb + a1d2a2d3a4b_18kb + a1d2a2d3a5a_18kb + a1d2a2d3a5b_18kb
a2_18kb_total = a2_18kb + a2vpx_18kb + a2d3a3_18kb + a2d3a4d_18kb + a2d3a4c_18kb + a2d3a4a_18kb + a2d3a4b_18kb + a2d3a5a_18kb + a2d3a5b_18kb
a3_18kb_total = a3_18kb
a4_18kb_total = a4d_18kb + a4c_18kb + a4b_18kb + a4a_18kb
a5_18kb_total = a5a_18kb + a5b_18kb
total18KB = a1_18kb_total + a2_18kb_total + a3_18kb_total + a4_18kb_total + a5_18kb_total
#puts 'total18KB', total18KB
#puts

#final acceptor - 1.8KB
#these leave out splices to A1 and A2 without final acceptor info
a1_18kb_final = a1vif_18kb
a2_18kb_final = a1d2a2vpx_18kb + a2vpx_18kb
a3_18kb_final = a3_18kb + a1d2a3_18kb + a2d3a3_18kb + a1d2a2d3a3_18kb
a4d_18kb_final = a4d_18kb + a1d2a4d_18kb + a2d3a4d_18kb + a1d2a2d3a4d_18kb
a4c_18kb_final = a4c_18kb + a1d2a4c_18kb + a2d3a4c_18kb + a1d2a2d3a4c_18kb
a4a_18kb_final = a4a_18kb + a1d2a4a_18kb + a2d3a4a_18kb + a1d2a2d3a4a_18kb
a4b_18kb_final = a4b_18kb + a1d2a4b_18kb + a2d3a4b_18kb + a1d2a2d3a4b_18kb
a5a_18kb_final = a5a_18kb + a1d2a5a_18kb + a2d3a5a_18kb + a1d2a2d3a5a_18kb
a5b_18kb_final = a5b_18kb + a1d2a5b_18kb + a2d3a5b_18kb + a1d2a2d3a5b_18kb
a4all_18kb_final = a4d_18kb_final + a4c_18kb_final + a4a_18kb_final + a4b_18kb_final
a5all_18kb_final = a5a_18kb_final + a5b_18kb_final
all_18kb_final = a1_18kb_final + a2_18kb_final + a3_18kb_final + a4all_18kb_final + a5all_18kb_final
#puts 'all_18kb_final', all_18kb_final
#puts

#Initial acceptors - 4 KB
a1_4kb_total = a1_4kb + a1vif_4kb +  a1d2a2_4kb + a1d2a2vpx_4kb + a1d2a3_4kb + a1d2a4d_4kb + a1d2a4c_4kb + a1d2a4a_4kb + a1d2a4b_4kb + a1d2a5a_4kb + a1d2a5b_4kb + a1d2a2d3a3_4kb + a1d2a2d3a4d_4kb + a1d2a2d3a4c_4kb + a1d2a2d3a4a_4kb + a1d2a2d3a4b_4kb + a1d2a2d3a5a_4kb + a1d2a2d3a5b_4kb
a2_4kb_total = a2_4kb + a2vpx_4kb + a2d3a3_4kb + a2d3a4d_4kb + a2d3a4c_4kb + a2d3a4a_4kb + a2d3a4b_4kb + a2d3a5a_4kb + a2d3a5b_4kb
a3_4kb_total = a3_4kb
a4_4kb_total = a4d_4kb + a4c_4kb + a4b_4kb + a4a_4kb
a5_4kb_total = a5a_4kb + a5b_4kb
total4KB = a1_4kb_total + a2_4kb_total + a3_4kb_total + a4_4kb_total + a5_4kb_total
#puts 'tota4KB', total4KB
#puts


#final acceptor - 4KB
#these leave out splices to A1 and A2 without final acceptor info
a1_4kb_final = a1vif_4kb
a2_4kb_final = a1d2a2vpx_4kb + a2vpx_4kb
a3_4kb_final = a3_4kb + a1d2a3_4kb + a2d3a3_4kb + a1d2a2d3a3_4kb
a4d_4kb_final = a4d_4kb + a1d2a4d_4kb + a2d3a4d_4kb + a1d2a2d3a4d_4kb
a4c_4kb_final = a4c_4kb + a1d2a4c_4kb + a2d3a4c_4kb + a1d2a2d3a4c_4kb
a4a_4kb_final = a4a_4kb + a1d2a4a_4kb + a2d3a4a_4kb + a1d2a2d3a4a_4kb
a4b_4kb_final = a4b_4kb + a1d2a4b_4kb + a2d3a4b_4kb + a1d2a2d3a4b_4kb
a5a_4kb_final = a5a_4kb + a1d2a5a_4kb + a2d3a5a_4kb + a1d2a2d3a5a_4kb
a5b_4kb_final = a5b_4kb + a1d2a5b_4kb + a2d3a5b_4kb + a1d2a2d3a5b_4kb
a4all_4kb_final = a4d_4kb_final + a4c_4kb_final + a4a_4kb_final + a4b_4kb_final
a5all_4kb_final = a5a_4kb_final + a5b_4kb_final
all_4kb_final = a1_4kb_final + a2_4kb_final + a3_4kb_final + a4all_4kb_final + a5all_4kb_final
#puts 'all_4kb_final', all_4kb_final
#puts

a1Final = a1_nsi_final + a1_4kb_final + a1_18kb_final
a2Final = a2_nsi_final + a2_4kb_final + a2_18kb_final
a3Final = a3_nsi_final + a3_4kb_final + a3_18kb_final
a4Final = a4all_nsi_final + a4all_4kb_final + a4all_18kb_final
a5Final = a5all_nsi_final + a5all_4kb_final + a5all_18kb_final
allFinalSpliced = a1Final + a2Final + a3Final + a4Final + a5Final
#puts 'allFinalSpliced', allFinalSpliced
#puts

a1Total = a1_nsi_total + a1_18kb_total + a1_4kb_total
a2Total = a2_nsi_total + a2_18kb_total + a2_4kb_total
a3Total = a3_nsi_total + a3_18kb_total + a3_4kb_total
a4Total = a4_nsi_total + a4_18kb_total + a4_4kb_total
a5Total = a5_nsi_total + a5_18kb_total + a5_4kb_total

allSplices = 1.00*(a1Total + a2Total + a3Total + a4Total + a5Total) #should = onepoint8kb + fourkb + splicedNoSizeInfo
#puts 'allSplices', allSplices
#puts
allSplicesPlusNef = allSplices + nef1
#puts 'allSplicesPlusNef', allSplicesPlusNef
#puts

writeOut.write("\n\nDenominators for NoSizeInfo, 1.8 KB, and 4 KB:\n")
writeOut.write("allSplices - calculated from acceptor usage, should = totalSpliced - nef1\n")
writeOut.write("allSplicesPlusNef - calculated from acceptor usage, should = allSplicesPlusNef\n\n\n")
#percentage of splices without size info, using allSplices so as not to include nef1 reads
writeOut.write("Splices without size class info\n")
percentSplicedWithNoSizeInfo = (100.0 * totalNoSizeInfo)/allSplices
writeOut.write("SplicedNoSizeInfoPercentOfAllSplices\t#{totalNoSizeInfo}\t#{percentSplicedWithNoSizeInfo}\n")


#Splices without size info
writeOut.write("Spliced without D4-A7 Size Info - counts and percents of totalNoSizeInfo\n")
writeOut.write("A1 No Size Info\t#{a1_nsi}\t#{a1_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2 No Size Info\t#{a2_nsi}\t#{a2_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A3 No Size Info\t#{a3_nsi}\t#{a3_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A4d No Size Info\t#{a4d_nsi}\t#{a4d_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A4c No Size Info\t#{a4c_nsi}\t#{a4c_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A4a No Size Info\t#{a4a_nsi}\t#{a4a_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A4b No Size Info\t#{a4b_nsi}\t#{a4b_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A5a No Size Info\t#{a5a_nsi}\t#{a5a_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A5b No Size Info\t#{a5b_nsi}\t#{a5b_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1Vif No Size Info\t#{a1vif_nsi}\t#{a1vif_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2Vpx No Size Info\t#{a1d2a2vpx_nsi}\t#{a1d2a2vpx_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A3 No Size Info\t#{a1d2a3_nsi}\t#{a1d2a3_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A4d No Size Info\t#{a1d2a4d_nsi}\t#{a1d2a4d_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A4c No Size Info\t#{a1d2a4c_nsi}\t#{a1d2a4c_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A4a No Size Info\t#{a1d2a4a_nsi}\t#{a1d2a4a_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A4b No Size Info\t#{a1d2a4b_nsi}\t#{a1d2a4b_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A5a No Size Info\t#{a1d2a5a_nsi}\t#{a1d2a5a_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A5b No Size Info\t#{a1d2a5b_nsi}\t#{a1d2a5b_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2 No Size Info\t#{a1d2a2_nsi}\t#{a1d2a2_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2Vpx No Size Info\t#{a2vpx_nsi}\t#{a2vpx_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2D3A3 No Size Info\t#{a2d3a3_nsi}\t#{a2d3a3_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2D3A4d No Size Info\t#{a2d3a4d_nsi}\t#{a2d3a4d_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2D3A4c No Size Info\t#{a2d3a4c_nsi}\t#{a2d3a4c_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2D3A4a No Size Info\t#{a2d3a4a_nsi}\t#{a2d3a4a_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2D3A4b No Size Info\t#{a2d3a4b_nsi}\t#{a2d3a4b_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2D3A5a No Size Info\t#{a2d3a5a_nsi}\t#{a2d3a5a_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A2D3A5b No Size Info\t#{a2d3a5b_nsi}\t#{a2d3a5b_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2D3A3 No Size Info\t#{a1d2a2d3a3_nsi}\t#{a1d2a2d3a3_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2D3A4d No Size Info\t#{a1d2a2d3a4d_nsi}\t#{a1d2a2d3a4d_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2D3A4c No Size Info\t#{a1d2a2d3a4c_nsi}\t#{a1d2a2d3a4c_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2D3A4a No Size Info\t#{a1d2a2d3a4a_nsi}\t#{a1d2a2d3a4a_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2D3A4b No Size Info\t#{a1d2a2d3a4b_nsi}\t#{a1d2a2d3a4b_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2D3A5a No Size Info\t#{a1d2a2d3a5a_nsi}\t#{a1d2a2d3a5a_nsi * 100/totalNoSizeInfo}\n")
writeOut.write("A1D2A2D3A5b No Size Info\t#{a1d2a2d3a5b_nsi}\t#{a1d2a2d3a5b_nsi * 100/totalNoSizeInfo}\n\n")

#Initial acceptors - no size info
writeOut.write("Initial Acceptor Usage in Spliced without Size Info - counts and percents of totalNoSizeInfo\n")
writeOut.write("Percent A1 No Size Info\t#{a1_nsi_total}\t#{100 * a1_nsi_total/totalNoSizeInfo}\n")
writeOut.write("Percent A2 No Size Info\t#{a2_nsi_total}\t#{100 * a2_nsi_total/totalNoSizeInfo}\n")
writeOut.write("Percent A3 No Size Info\t#{a3_nsi_total}\t#{100 * a3_nsi_total/totalNoSizeInfo}\n")
writeOut.write("Percent A4 No Size Info\t#{a4_nsi_total}\t#{100 * (a4_nsi_total)/totalNoSizeInfo}\n")
writeOut.write("Percent A5 No Size Info\t#{a5_nsi_total}\t#{100 * (a5_nsi_total + a5b_nsi)/totalNoSizeInfo}\n\n")

#final acceptor - no size info
#these leave out splices to A1 and A2 without final acceptor info

writeOut.write("Final Acceptor Usage without Size Info but with Final Acceptor Known - counts and percents of all_nsi_final\n")
writeOut.write("A1 Final Total No Size Info\t#{a1_nsi_final}\t#{100*a1_nsi_final/all_nsi_final}\n")
writeOut.write("A2 Final Total No Size Info\t#{a2_nsi_final}\t#{100*a2_nsi_final/all_nsi_final}\n")
writeOut.write("A3 Final Total No Size Info\t#{a3_nsi_final}\t#{100*a3_nsi_final/all_nsi_final}\n")
writeOut.write("A4d Final Total No Size Info\t#{a4d_nsi_final}\t#{100*a4d_nsi_final/all_nsi_final}\n")
writeOut.write("A4c Final Total No Size Info\t#{a4c_nsi_final}\t#{100*a4c_nsi_final/all_nsi_final}\n")
writeOut.write("A4a Final Total No Size Info\t#{a4a_nsi_final}\t#{100*a4a_nsi_final/all_nsi_final}\n")
writeOut.write("A4b Final Total No Size Info\t#{a4b_nsi_final}\t#{100*a4b_nsi_final/all_nsi_final}\n")
writeOut.write("A5a Final Total No Size Info\t#{a5a_nsi_final}\t#{100*a5a_nsi_final/all_nsi_final}\n")
writeOut.write("A5b Final Total No Size Info\t#{a5b_nsi_final}\t#{100*a5b_nsi_final/all_nsi_final}\n\n")
writeOut.write("A1 Final Total No Size Info\t#{a1_nsi_final}\t#{100*a1_nsi_final/all_nsi_final}\n")
writeOut.write("A2 Final Total No Size Info\t#{a2_nsi_final}\t#{100*a2_nsi_final/all_nsi_final}\n")
writeOut.write("A3 Final Total No Size Info\t#{a3_nsi_final}\t#{100*a3_nsi_final/all_nsi_final}\n")
writeOut.write("A4 Final Total No Size Info\t#{a4all_nsi_final}\t#{100*a4all_nsi_final/all_nsi_final}\n")
writeOut.write("A5 Final Total No Size Info\t#{a5all_nsi_final}\t#{100*a5all_nsi_final/all_nsi_final}\n\n\n\n")





#Spliced with 1.8KB info
writeOut.write("Spliced 1.8KB - counts and percents of total18KB\n")
writeOut.write("A1 1.8KB\t#{a1_18kb}\t#{a1_18kb * 100/total18KB}\n")
writeOut.write("A2 1.8KB\t#{a2_18kb}\t#{a2_18kb * 100/total18KB}\n")
writeOut.write("A3 1.8KB\t#{a3_18kb}\t#{a3_18kb * 100/total18KB}\n")
writeOut.write("A4d 1.8KB\t#{a4d_18kb}\t#{a4d_18kb * 100/total18KB}\n")
writeOut.write("A4c 1.8KB\t#{a4c_18kb}\t#{a4c_18kb * 100/total18KB}\n")
writeOut.write("A4a 1.8KB\t#{a4a_18kb}\t#{a4a_18kb * 100/total18KB}\n")
writeOut.write("A4b 1.8KB\t#{a4b_18kb}\t#{a4b_18kb * 100/total18KB}\n")
writeOut.write("A5a 1.8KB\t#{a5a_18kb}\t#{a5a_18kb * 100/total18KB}\n")
writeOut.write("A5b 1.8KB\t#{a5b_18kb}\t#{a5b_18kb * 100/total18KB}\n")
writeOut.write("A1Vif 1.8KB\t#{a1vif_18kb}\t#{a1vif_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2Vpx 1.8KB\t#{a1d2a2vpx_18kb}\t#{a1d2a2vpx_18kb * 100/total18KB}\n")
writeOut.write("A1D2A3 1.8KB\t#{a1d2a3_18kb}\t#{a1d2a3_18kb * 100/total18KB}\n")
writeOut.write("A1D2A4d 1.8KB\t#{a1d2a4d_18kb}\t#{a1d2a4d_18kb * 100/total18KB}\n")
writeOut.write("A1D2A4c 1.8KB\t#{a1d2a4c_18kb}\t#{a1d2a4c_18kb * 100/total18KB}\n")
writeOut.write("A1D2A4a 1.8KB\t#{a1d2a4a_18kb}\t#{a1d2a4a_18kb * 100/total18KB}\n")
writeOut.write("A1D2A4b 1.8KB\t#{a1d2a4b_18kb}\t#{a1d2a4b_18kb * 100/total18KB}\n")
writeOut.write("A1D2A5a 1.8KB\t#{a1d2a5a_18kb}\t#{a1d2a5a_18kb * 100/total18KB}\n")
writeOut.write("A1D2A5b 1.8KB\t#{a1d2a5b_18kb}\t#{a1d2a5b_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2 1.8KB\t#{a1d2a2_18kb}\t#{a1d2a2_18kb * 100/total18KB}\n")
writeOut.write("A2Vpx 1.8KB\t#{a2vpx_18kb}\t#{a2vpx_18kb * 100/total18KB}\n")
writeOut.write("A2D3A3 1.8KB\t#{a2d3a3_18kb}\t#{a2d3a3_18kb * 100/total18KB}\n")
writeOut.write("A2D3A4d 1.8KB\t#{a2d3a4d_18kb}\t#{a2d3a4d_18kb * 100/total18KB}\n")
writeOut.write("A2D3A4c 1.8KB\t#{a2d3a4c_18kb}\t#{a2d3a4c_18kb * 100/total18KB}\n")
writeOut.write("A2D3A4a 1.8KB\t#{a2d3a4a_18kb}\t#{a2d3a4a_18kb * 100/total18KB}\n")
writeOut.write("A2D3A4b 1.8KB\t#{a2d3a4b_18kb}\t#{a2d3a4b_18kb * 100/total18KB}\n")
writeOut.write("A2D3A5a 1.8KB\t#{a2d3a5a_18kb}\t#{a2d3a5a_18kb * 100/total18KB}\n")
writeOut.write("A2D3A5b 1.8KB\t#{a2d3a5b_18kb}\t#{a2d3a5b_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2D3A3 1.8KB\t#{a1d2a2d3a3_18kb}\t#{a1d2a2d3a3_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2D3A4d 1.8KB\t#{a1d2a2d3a4d_18kb}\t#{a1d2a2d3a4d_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2D3A4c 1.8KB\t#{a1d2a2d3a4c_18kb}\t#{a1d2a2d3a4c_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2D3A4a 1.8KB\t#{a1d2a2d3a4a_18kb}\t#{a1d2a2d3a4a_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2D3A4b 1.8KB\t#{a1d2a2d3a4b_18kb}\t#{a1d2a2d3a4b_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2D3A5a 1.8KB\t#{a1d2a2d3a5a_18kb}\t#{a1d2a2d3a5a_18kb * 100/total18KB}\n")
writeOut.write("A1D2A2D3A5b 1.8KB\t#{a1d2a2d3a5b_18kb}\t#{a1d2a2d3a5b_18kb * 100/total18KB}\n\n")

#Initial acceptors - 1.8KB
writeOut.write("Initial Acceptor Usage in Spiced 1.8KB - counts and percents of total18KB\n")
writeOut.write("Percent A1 1.8KB\t#{a1_18kb_total}\t#{100 * a1_18kb_total/total18KB}\n")
writeOut.write("Percent A2 1.8KB\t#{a2_18kb_total}\t#{100 * a2_18kb_total/total18KB}\n")
writeOut.write("Percent A3 1.8KB\t#{a3_18kb_total}\t#{100 * a3_18kb_total/total18KB}\n")
writeOut.write("Percent A4 1.8KB\t#{a4_18kb_total}\t#{100 * (a4_18kb_total)/total18KB}\n")
writeOut.write("Percent A5 1.8KB\t#{a5_18kb_total}\t#{100 * (a5_18kb_total)/total18KB}\n\n")


writeOut.write("Final Acceptor Usage 1.8KB and with Final Acceptor Known - counts and percents of all_18kb_final\n")
writeOut.write("A1 Final Total 1.8KB\t#{a1_18kb_final}\t#{100*a1_18kb_final/all_18kb_final}\n")
writeOut.write("A2 Final Total 1.8KB\t#{a2_18kb_final}\t#{100*a2_18kb_final/all_18kb_final}\n")
writeOut.write("A3 Final Total 1.8KB\t#{a3_18kb_final}\t#{100*a3_18kb_final/all_18kb_final}\n")
writeOut.write("A4d Final Total 1.8KB\t#{a4d_18kb_final}\t#{100*a4d_18kb_final/all_18kb_final}\n")
writeOut.write("A4c Final Total 1.8KB\t#{a4c_18kb_final}\t#{100*a4c_18kb_final/all_18kb_final}\n")
writeOut.write("A4a Final Total 1.8KB\t#{a4a_18kb_final}\t#{100*a4a_18kb_final/all_18kb_final}\n")
writeOut.write("A4b Final Total 1.8KB\t#{a4b_18kb_final}\t#{100*a4b_18kb_final/all_18kb_final}\n")
writeOut.write("A5a Final Total 1.8KB\t#{a5a_18kb_final}\t#{100*a5a_18kb_final/all_18kb_final}\n")
writeOut.write("A5b Final Total 1.8KB\t#{a5b_18kb_final}\t#{100*a5b_18kb_final/all_18kb_final}\n\n")
writeOut.write("A1 Final Total 1.8KB\t#{a1_18kb_final}\t#{100*a1_18kb_final/all_18kb_final}\n")
writeOut.write("A2 Final Total 1.8KB\t#{a2_18kb_final}\t#{100*a2_18kb_final/all_18kb_final}\n")
writeOut.write("A3 Final Total 1.8KB\t#{a3_18kb_final}\t#{100*a3_18kb_final/all_18kb_final}\n")
writeOut.write("A4 Final Total 1.8KB\t#{a4all_18kb_final}\t#{100*a4all_18kb_final/all_18kb_final}\n")
writeOut.write("A5 Final Total 1.8KB\t#{a5all_18kb_final}\t#{100*a5all_18kb_final/all_18kb_final}\n\n\n\n")




#Spliced with 4KB info
writeOut.write("Spliced 4KB - counts and percents of total4KB\n")
writeOut.write("A1 4KB\t#{a1_4kb}\t#{a1_4kb * 100/total4KB}\n")
writeOut.write("A2 4KB\t#{a2_4kb}\t#{a2_4kb * 100/total4KB}\n")
writeOut.write("A3 4KB\t#{a3_4kb}\t#{a3_4kb * 100/total4KB}\n")
writeOut.write("A4d 4KB\t#{a4d_4kb}\t#{a4d_4kb * 100/total4KB}\n")
writeOut.write("A4c 4KB\t#{a4c_4kb}\t#{a4c_4kb * 100/total4KB}\n")
writeOut.write("A4a 4KB\t#{a4a_4kb}\t#{a4a_4kb * 100/total4KB}\n")
writeOut.write("A4b 4KB\t#{a4b_4kb}\t#{a4b_4kb * 100/total4KB}\n")
writeOut.write("A5a 4KB\t#{a5a_4kb}\t#{a5a_4kb * 100/total4KB}\n")
writeOut.write("A5b 4KB\t#{a5b_4kb}\t#{a5b_4kb * 100/total4KB}\n")
writeOut.write("A1Vif 4KB\t#{a1vif_4kb}\t#{a1vif_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2Vpx 4KB\t#{a1d2a2vpx_4kb}\t#{a1d2a2vpx_4kb * 100/total4KB}\n")
writeOut.write("A1D2A3 4KB\t#{a1d2a3_4kb}\t#{a1d2a3_4kb * 100/total4KB}\n")
writeOut.write("A1D2A4d 4KB\t#{a1d2a4d_4kb}\t#{a1d2a4d_4kb * 100/total4KB}\n")
writeOut.write("A1D2A4c 4KB\t#{a1d2a4c_4kb}\t#{a1d2a4c_4kb * 100/total4KB}\n")
writeOut.write("A1D2A4a 4KB\t#{a1d2a4a_4kb}\t#{a1d2a4a_4kb * 100/total4KB}\n")
writeOut.write("A1D2A4b 4KB\t#{a1d2a4b_4kb}\t#{a1d2a4b_4kb * 100/total4KB}\n")
writeOut.write("A1D2A5a 4KB\t#{a1d2a5a_4kb}\t#{a1d2a5a_4kb * 100/total4KB}\n")
writeOut.write("A1D2A5b 4KB\t#{a1d2a5b_4kb}\t#{a1d2a5b_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2 4KB\t#{a1d2a2_4kb}\t#{a1d2a2_4kb * 100/total4KB}\n")
writeOut.write("A2Vpx 4KB\t#{a2vpx_4kb}\t#{a2vpx_4kb * 100/total4KB}\n")
writeOut.write("A2D3A3 4KB\t#{a2d3a3_4kb}\t#{a2d3a3_4kb * 100/total4KB}\n")
writeOut.write("A2D3A4d 4KB\t#{a2d3a4d_4kb}\t#{a2d3a4d_4kb * 100/total4KB}\n")
writeOut.write("A2D3A4c 4KB\t#{a2d3a4c_4kb}\t#{a2d3a4c_4kb * 100/total4KB}\n")
writeOut.write("A2D3A4a 4KB\t#{a2d3a4a_4kb}\t#{a2d3a4a_4kb * 100/total4KB}\n")
writeOut.write("A2D3A4b 4KB\t#{a2d3a4b_4kb}\t#{a2d3a4b_4kb * 100/total4KB}\n")
writeOut.write("A2D3A5a 4KB\t#{a2d3a5a_4kb}\t#{a2d3a5a_4kb * 100/total4KB}\n")
writeOut.write("A2D3A5b 4KB\t#{a2d3a5b_4kb}\t#{a2d3a5b_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2D3A3 4KB\t#{a1d2a2d3a3_4kb}\t#{a1d2a2d3a3_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2D3A4d 4KB\t#{a1d2a2d3a4d_4kb}\t#{a1d2a2d3a4d_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2D3A4c 4KB\t#{a1d2a2d3a4c_4kb}\t#{a1d2a2d3a4c_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2D3A4a 4KB\t#{a1d2a2d3a4a_4kb}\t#{a1d2a2d3a4a_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2D3A4b 4KB\t#{a1d2a2d3a4b_4kb}\t#{a1d2a2d3a4b_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2D3A5a 4KB\t#{a1d2a2d3a5a_4kb}\t#{a1d2a2d3a5a_4kb * 100/total4KB}\n")
writeOut.write("A1D2A2D3A5b 4KB\t#{a1d2a2d3a5b_4kb}\t#{a1d2a2d3a5b_4kb * 100/total4KB}\n\n")

#Initial acceptors - 4KB
writeOut.write("Initial Acceptor Usage in Spiced 4KB - counts and percents of total4KB\n")
writeOut.write("Percent A1 4KB\t#{a1_4kb_total}\t#{100 * a1_4kb_total/total4KB}\n")
writeOut.write("Percent A2 4KB\t#{a2_4kb_total}\t#{100 * a2_4kb_total/total4KB}\n")
writeOut.write("Percent A3 4KB\t#{a3_4kb_total}\t#{100 * a3_4kb_total/total4KB}\n")
writeOut.write("Percent A4 4KB\t#{a4_4kb_total}\t#{100 * a4_4kb_total/total4KB}\n")
writeOut.write("Percent A5 4KB\t#{a5_4kb_total}\t#{100 * a5_4kb_total/total4KB}\n\n")

#Final acceptors - 4 KB
writeOut.write("Final Acceptor Usage 4KB and with Final Acceptor Info - counts and percents of all_4kb_final\n")
writeOut.write("A1 Final Total 4KB\t#{a1_4kb_final}\t#{100*a1_4kb_final/all_4kb_final}\n")
writeOut.write("A2 Final Total 4KB\t#{a2_4kb_final}\t#{100*a2_4kb_final/all_4kb_final}\n")
writeOut.write("A3 Final Total 4KB\t#{a3_4kb_final}\t#{100*a3_4kb_final/all_4kb_final}\n")
writeOut.write("A4d Final Total 4KB\t#{a4d_4kb_final}\t#{100*a4d_4kb_final/all_4kb_final}\n")
writeOut.write("A4c Final Total 4KB\t#{a4c_4kb_final}\t#{100*a4c_4kb_final/all_4kb_final}\n")
writeOut.write("A4a Final Total 4KB\t#{a4a_4kb_final}\t#{100*a4a_4kb_final/all_4kb_final}\n")
writeOut.write("A4b Final Total 4KB\t#{a4b_4kb_final}\t#{100*a4b_4kb_final/all_4kb_final}\n")
writeOut.write("A5a Final Total 4KB\t#{a5a_4kb_final}\t#{100*a5a_4kb_final/all_4kb_final}\n")
writeOut.write("A5b Final Total 4KB\t#{a5b_4kb_final}\t#{100*a5b_4kb_final/all_4kb_final}\n\n")
writeOut.write("A1 Final Total 4KB\t#{a1_4kb_final}\t#{100*a1_4kb_final/all_4kb_final}\n")
writeOut.write("A2 Final Total 4KB\t#{a2_4kb_final}\t#{100*a2_4kb_final/all_4kb_final}\n")
writeOut.write("A3 Final Total 4KB\t#{a3_4kb_final}\t#{100*a3_4kb_final/all_4kb_final}\n")
writeOut.write("A4 Final Total 4KB\t#{a4all_4kb_final}\t#{100*a4all_4kb_final/all_4kb_final}\n")
writeOut.write("A5 Final Total 4KB\t#{a5all_4kb_final}\t#{100*a5all_4kb_final/all_4kb_final}\n\n\n\n")




#cummulative acceptor usage
writeOut.write("Initial Acceptor Usage - percentage of allSplices\n")

#percentages of acceptor usage not including nef
writeOut.write("All Splices initial acceptor except nef\t#{allSplices}\n")
writeOut.write("A1 percentage\t#{a1Total}\t#{100*a1Total/allSplices}\n")
writeOut.write("A2 percentage\t#{a2Total}\t#{100*a2Total/allSplices}\n")
writeOut.write("A3 percentage\t#{a3Total}\t#{100*a3Total/allSplices}\n")
writeOut.write("A4 percentage\t#{a4Total}\t#{100*a4Total/allSplices}\n")
writeOut.write("A5 percentage\t#{a5Total}\t#{100*a5Total/allSplices}\n\n")

#percentages of acceptor usage including nef
writeOut.write("Initial Acceptor Usage - percentage of allSplicesPlusNef\n")
writeOut.write("All Splices initial acceptor including nef\t#{allSplicesPlusNef}\n")
writeOut.write("A1 percentage\t#{a1Total}\t#{100*a1Total/allSplicesPlusNef}\n")
writeOut.write("A2 percentage\t#{a2Total}\t#{100*a2Total/allSplicesPlusNef}\n")
writeOut.write("A3 percentage\t#{a3Total}\t#{100*a3Total/allSplicesPlusNef}\n")
writeOut.write("A4 percentage\t#{a4Total}\t#{100*a4Total/allSplicesPlusNef}\n")
writeOut.write("A5 percentage\t#{a5Total}\t#{100*a5Total/allSplicesPlusNef}\n")
writeOut.write("A7 percentage\t#{nef1}\t#{100*nef1/allSplicesPlusNef}\n\n\n")



writeOut.write("Final Acceptor Usage - percentage allFinalSpliced\n")
writeOut.write("All Splices final acceptor\t#{allFinalSpliced}\n")
writeOut.write("A1 percentage\t#{a1Final}\t#{100*a1Final/allFinalSpliced}\n")
writeOut.write("A2 percentage\t#{a2Final}\t#{100*a2Final/allFinalSpliced}\n")
writeOut.write("A3 percentage\t#{a3Final}\t#{100*a3Final/allFinalSpliced}\n")
writeOut.write("A4 percentage\t#{a4Final}\t#{100*a4Final/allFinalSpliced}\n")
writeOut.write("A5 percentage\t#{a5Final}\t#{100*a5Final/allFinalSpliced}\n\n")

#monitor this one odd thing - may be only in Xiao's data set
writeOut.write("bind@8564 and splice 8366-6701, but mismatch at D4\t#{bind_8564_splice8366_6701}\t#{100*bind_8564_splice8366_6701/allSplicesPlusNef}\n\n\n")


distributionHash = Hash.new(0)  #counts occurances of PIDs
pIDCountHash.each do |pID , count|
    distributionHash[count] += 1
end

sortedKeys = distributionHash.keys.sort() #sorts the PID distribution counts and prints out in order

crypticOut.write("\n\nPID Distribution\n")
sortedKeys.each do |count|
    crypticOut.write(count.to_s + "\t" + distributionHash[count].to_s + "\n")
end


crypticOut.write("Cryptic Splices\n")
crypticOut.write("Gag Exon 4 kb\t#{gagexon_4kb}\t#{100*gagexon_4kb/allSplicesPlusNef}\n")
crypticOut.write("Gag Exon 1.8 kb\t#{gagexon_18kb}\t#{100*gagexon_18kb/allSplicesPlusNef}\n")
crypticOut.write("Gag Exon nsi\t#{gagexon_nsi}\t#{100*gagexon_nsi/allSplicesPlusNef}\n\n\n")
crypticOut.write("A9162\n")
crypticOut.write("A9162\t#{a9162}\t#{100*a9162/allSplicesPlusNef}\n\n\n")
crypticOut.write("bind@8564 and splice 8366-6701, but mismatch at D4\t#{bind_8564_splice8366_6701}\t#{100*bind_8564_splice8366_6701/allSplicesPlusNef}\n\n\n")




########
crypticIdx_sortedKeys = crypticIdxHash.keys().sort()
crypticOut.write("\n\nCrypticAcceptors\n")
sumCryptics = 0.0 #sum up all the cryptic acceptor events
sumCryptics = sumCryptics + a9162 + gagexon_nsi + gagexon_4kb + gagexon_18kb  #include the ones not counted in the cryptic IdxHash, but counted above
crypticIdx_sortedKeys.each do | key |
    howManyTimes = crypticIdxHash[key]
    sumCryptics = sumCryptics + howManyTimes
    percentOfCanonicalSplices = 100.0 * howManyTimes/allReads
    crypticOut.write(key.to_s + "\t" + crypticIdxHash[key].to_s  + "\t" + percentOfCanonicalSplices.to_s + "\n")
end
crypticOut.write("\n")
crypticOut.write("Total Cryptic Acceptor Use as a Percentage of All Valid Reads:\t" + (100.0 *sumCryptics/allReads).to_s + "\n\n")


crypticSequence_sortedKeys = crypticSequenceHash.keys().sort()
crypticOut.write("\n\nCrypticAcceptorSequences>20-NoIndex\n")
crypticSequence_sortedKeys.each do | key |
    if crypticSequenceHash[key] >= 20
        crypticOut.write(key + "\t" + crypticSequenceHash[key].to_s  + "\n")
    end
end



crypticSequence_sortedKeys = crypticSequenceHash.keys().sort()
crypticOut.write("\n\nCrypticAcceptorSequences-NoIndex\n")
crypticSequence_sortedKeys.each do | key |
    crypticOut.write(key + "\t" + crypticSequenceHash[key].to_s  + "\n")
end


#total count of all PIDs with binding site found
infoOut.write("\n\nPIDs with binding info, percent of all PIDs\t#{boundPIDcount}\t#{boundPIDcount/spliceDataHash.keys.size()}")

#unmapped reverse primer binding sites
infoOut.write("\n\nUnmapped reverse primer sequences\nSequence\tCount\n")
noBindIdxSortedKeys = rpNoBindHash.keys.sort
noBindIdxSortedKeys.each do |key|
    infoOut.write("#{key}\t#{rpNoBindHash[key]}\n")
end
    


#all acceptors across genome
infoOut.write("\n\n\nAll Acceptors across the genome\n")
infoOut.write("Index\tUnspliced\tA1\tA2\tA3\tA4\tA5\n")
for bindIdx in 574..($refRClength)
    infoOut.write(bindIdx.to_s + "\t" + rpBindUnspliced[bindIdx].to_s + "\t" +  rpBindA1[bindIdx].to_s + "\t" +  rpBindA2[bindIdx].to_s + "\t" +  rpBindA3[bindIdx].to_s + "\t" +  rpBindA4[bindIdx].to_s + "\t" +  rpBindA5[bindIdx].to_s  + "\n")
end





#A1
infoOut.write("\n\nA1 Reverse Primer Binding Sites\nForward Index\tCount\n")
for rpBindIdxA1 in 4913..6450
    infoOut.write("#{rpBindIdxA1.to_s}\t#{rpBindA1[rpBindIdxA1]}\n")
end
infoOut.write("A1 at A7\n")
for rpBindIdxA1 in 8364..8775
    infoOut.write("#{rpBindIdxA1.to_s}\t#{rpBindA1[rpBindIdxA1]}\n")
end




#A2
infoOut.write("\n\nA2 Reverse Primer Binding Sites\nForward Index\tCount\n")
for rpBindIdxA2 in 5385..6490
    infoOut.write("#{rpBindIdxA2.to_s}\t#{rpBindA2[rpBindIdxA2]}\n")
end
infoOut.write("A2 at A7\n")
for rpBindIdxA2 in 8364..8825
    infoOut.write("#{rpBindIdxA2.to_s}\t#{rpBindA2[rpBindIdxA2]}\n")
end




#A3
infoOut.write("\n\nA3 Reverse Primer Binding Sites\nForward Index\tCount\n")
for rpBindIdxA3 in 5772..6372
    infoOut.write("#{rpBindIdxA3.to_s}\t#{rpBindA3[rpBindIdxA3]}\n")
end
infoOut.write("A3 at A7\n")
for rpBindIdxA3 in 8364..8636
    infoOut.write("#{rpBindIdxA3.to_s}\t#{rpBindA3[rpBindIdxA3]}\n")
end





#A4
infoOut.write("\n\nA4 Reverse Primer Binding Sites\nForward Index\tCount\n")
for rpBindIdxA4 in 5911..6511
    infoOut.write("#{rpBindIdxA4.to_s}\t#{rpBindA4[rpBindIdxA4]}\n")
end
infoOut.write("A4 at A7\n")
for rpBindIdxA4 in 8364..8831
    infoOut.write("#{rpBindIdxA4.to_s}\t#{rpBindA4[rpBindIdxA4]}\n")
end





#A5
infoOut.write("\n\nA5 Reverse Primer Binding Sites\nForward Index\tCount\n")
for rpBindIdxA5 in 5971..6571
    infoOut.write("#{rpBindIdxA5.to_s}\t#{rpBindA5[rpBindIdxA5]}\n")
end
infoOut.write("A5 at A7\n")
for rpBindIdxA5 in 8364..8891
    infoOut.write("#{rpBindIdxA5.to_s}\t#{rpBindA5[rpBindIdxA5]}\n")
end

infoOut.write("\n\nAll Binding Sites Across Entire Genome")
for rpBindIdx in 549..($refRClength - 20)
    infoOut.write("#{rpBindIdx.to_s}\t#{rpBindHash[rpBindIdx].to_s}\n")
end

infoOut.write("\n\n")


#PID analysis, only for valid PIDs
aCount = 0.0
cCount = 0.0
gCount = 0.0
tCount = 0.0
baseTable = []
4.times do
    baseTable << []
end
for i in 0...4
    for j in 0...14
        baseTable[i][j] = 0
    end
end



spliceDataHash.each do |validpid, spliceInfo|
    for place in 0..13
        base = validpid[place]
        if base == "A"
            baseTable[0][place] += 1
            elsif base == "C"
            baseTable[1][place] += 1
            elsif base == "G"
            baseTable[2][place] += 1
            elsif base == "T"
            baseTable[3][place] += 1
        end
    end
end

#print baseTable

#output of only valid and bound PIDs
#[[7954,  7704,  7411,  7203,  7306,  6874,  6545,  5983,  5639,  5422,  4780,  5050,  5673,  5333],
# [12994, 13950, 14839, 13820, 14382, 14873, 15592, 16190, 17175, 18666, 20172, 18825, 16161, 16358],
# [14893, 12176, 12759, 12218, 11726, 11557, 11335, 10507, 9915,  9187,  9549,  9975,  11114, 10719],
# [11611, 13622, 12443, 14211, 14038, 14148, 13980, 14772, 14723, 14177, 12951, 13602, 14504, 15042]]
crypticOut.write("PID Base Analysis - percentage of each base\nA\tC\tG\tT\n")
for place in 0..13
    placeSumPercent = 100.0 / (baseTable[0][place]  + baseTable[1][place] + baseTable[2][place] +  baseTable[3][place])
    crypticOut.write((baseTable[0][place]*placeSumPercent).to_s + "\t" + (baseTable[1][place]*placeSumPercent).to_s + "\t" + (baseTable[2][place]*placeSumPercent).to_s + "\t" + (baseTable[3][place]*placeSumPercent).to_s + "\n")
end
